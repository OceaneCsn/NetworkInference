if(filter){At <- At[At$MeanNormalizedExpression > 30,]}
return(At$ensembl)
}
geneList(c("cNF", "CNF"))
geneList <- function(comp, filter=T){
filename = paste0(path,translateToOSX(comp), ".txt")
At <- read.csv(filename, h=T, sep = "\t")
if(filter){At <- At[At$MeanNormalizedExpression > 30,]}
return(At$ensembl)
}
geneList(c("cNF", "CNF"))
path <- paste0(PATH_TO_DEG, "/FactorCO2/")
geneList(c("cNF", "CNF"))
geneList <- function(comp, filter=T){
filename = paste0(path,translateToOSX(comp), ".txt")
At <- read.csv(filename, h=T, sep = "\t")
if(filter){At <- At[At$MeanNormalizedExpression > 30,]}
return(At$ensembl_gene_id)
}
geneList(c("cNF", "CNF"))
geneList <- function(comp, filter=T){
filename = paste0(path,translateToOSX(comp), ".txt")
At <- read.csv(filename, h=T, sep = "\t")
if(filter){At <- At[At$MeanNormalizedExpression > 30,]}
return(as.vector(At$ensembl_gene_id))
}
geneList(c("cNF", "CNF"))
geneList(c("cnF", "CnF"))
geneList(c("cNf", "CNf"))
geneList(c("cnf", "Cnf"))
DEGs <- list()
path <- paste0(PATH_TO_DEG, "/FactorCO2/")
DEGs[[c("cNF", "CNF")]] <- geneList(c("cNF", "CNF"))
DEGs[[paste("cNF", "CNF")]] <- geneList(c("cNF", "CNF"))
View(DEGs)
DEGs <- list()
path <- paste0(PATH_TO_DEG, "/FactorCO2/")
DEGs[[paste("cNF", "CNF")]] <- geneList(c("cNF", "CNF"))
DEGs[[paste("cnF", "CnF")]] <- geneList(c("cnF", "CnF"))
DEGs[[paste("cNf", "CNf")]] <- geneList(c("cNf", "CNf"))
DEGs[[paste("cnf", "Cnf")]] <- geneList(c("cnf", "Cnf"))
path <- paste0(PATH_TO_DEG, "/FactorNitrate/")
DEGs[[paste("cNF", "cnF")]] <- geneList(c("cNF", "cnF"))
DEGs[[paste("CNF", "CnF")]] <- geneList(c("CNF", "CnF"))
DEGs[[paste("cNf", "cnf")]] <- geneList(c("cNf", "cnf"))
DEGs[[paste("CNf", "Cnf")]] <- geneList(c("CNf", "Cnf"))
path <- paste0(PATH_TO_DEG, "/FactorIron/")
DEGs[[paste("cNF", "cNf")]] <- geneList(c("cNF", "cNf"))
DEGs[[paste("cnF", "cnf")]] <- geneList(c("cnF", "cnf"))
DEGs[[paste("CNF", "CNf")]] <- geneList(c("CNF", "CNf"))
DEGs[[paste("CnF", "Cnf")]] <- geneList(c("CnF", "Cnf"))
View(DEGs)
save(DEGs, file = "./Data/DEGsFilterLists.RData")
geneList <- function(comp, filter=F){
filename = paste0(path,translateToOSX(comp), ".txt")
At <- read.csv(filename, h=T, sep = "\t")
if(filter){At <- At[At$MeanNormalizedExpression > 30,]}
return(as.vector(At$ensembl_gene_id))
}
DEGs <- list()
path <- paste0(PATH_TO_DEG, "/FactorCO2/")
DEGs[[paste("cNF", "CNF")]] <- geneList(c("cNF", "CNF"))
DEGs[[paste("cnF", "CnF")]] <- geneList(c("cnF", "CnF"))
DEGs[[paste("cNf", "CNf")]] <- geneList(c("cNf", "CNf"))
DEGs[[paste("cnf", "Cnf")]] <- geneList(c("cnf", "Cnf"))
path <- paste0(PATH_TO_DEG, "/FactorNitrate/")
DEGs[[paste("cNF", "cnF")]] <- geneList(c("cNF", "cnF"))
DEGs[[paste("CNF", "CnF")]] <- geneList(c("CNF", "CnF"))
DEGs[[paste("cNf", "cnf")]] <- geneList(c("cNf", "cnf"))
DEGs[[paste("CNf", "Cnf")]] <- geneList(c("CNf", "Cnf"))
path <- paste0(PATH_TO_DEG, "/FactorIron/")
DEGs[[paste("cNF", "cNf")]] <- geneList(c("cNF", "cNf"))
DEGs[[paste("cnF", "cnf")]] <- geneList(c("cnF", "cnf"))
DEGs[[paste("CNF", "CNf")]] <- geneList(c("CNF", "CNf"))
DEGs[[paste("CnF", "Cnf")]] <- geneList(c("CnF", "Cnf"))
save(DEGs, file = "./Data/DEGsLists.RData")
genes <- unlist(DEGs)
genes <- unique(unlist(DEGs))
load("./Data/normalized.count_At.RData")
cluster <- clustering(genes, normalized.count, nb_clusters = 5:20)
round(normalized.count, 0)
cluster <- clustering(genes, round(normalized.count, 0), nb_clusters = 5:20)
cluster <- clustering(genes, round(normalized.count, 0), nb_clusters = 14:15)
heatmap(normalized.count[sample(genes, size = 700),])
heatmap(normalized.count[sample(genes, size = 700),grep("cNF", colnames(normalized.count))])
heatmap(normalized.count[sample(genes, size = 700),grep("cNF", colnames(normalized.count))])
heatmap(normalized.count[sample(genes, size = 700),grep("cNF", colnames(normalized.count))])
heatmap(normalized.count[sample(genes, size = 700),grep("cNF", colnames(normalized.count))])
heatmap(normalized.count[sample(genes, size = 700),grep("cNF", colnames(normalized.count))])
heatmap(normalized.count[sample(genes, size = 700),grep("cNF", colnames(normalized.count))])
heatmap(normalized.count[sample(genes, size = 700),grep("cNF", colnames(normalized.count))])
heatmap(normalized.count[sample(genes, size = 700),grep("cNF", colnames(normalized.count))])
heatmap(normalized.count[sample(genes, size = 700),grep("cNF", colnames(normalized.count))])
heatmap(normalized.count[sample(genes, size = 700),!grepl("cNF_1", colnames(normalized.count))])
heatmap(normalized.count[sample(genes, size = 700),!grepl("cNF_1", colnames(normalized.count))])
genes <- unique(unlist(DEGs))
heatmap(normalized.count[sample(genes, size = 700),!grepl("cNF_1", colnames(normalized.count))])
cluster <- clustering(genes, round(normalized.count[,!grepl("cNF_1", colnames(normalized.count))], 0), nb_clusters = 8:14)
cluster <- clustering(genes, round(normalized.count, 0), nb_clusters = 8:14)
idsList <- cluster[[1]]
idsList
list <- names(idsList)
names(list) <- as.vector(idsList)
list
list(list)
as.list(list)
idsList
load("./Data/AGIToEntrez.RDAta")
View(AGIToEntrez)
entrez <- list()
idsList <- cluster[[1]]
for(k in 1:max(names(idsList))){
genesList <- names(idsList[idsList==k])
entrez[[k]] <- AGIToEntrez[match(genesList, AGIToEntrez$ensembl_gene_id),]$entrezgene_id
}
entrez <- list()
idsList <- cluster[[1]]
for(k in 1:max(idsList)){
genesList <- names(idsList[idsList==k])
entrez[[k]] <- AGIToEntrez[match(genesList, AGIToEntrez$ensembl_gene_id),]$entrezgene_id
}
entrez
entrez <- list()
idsList <- cluster[[1]]
for(k in 1:max(idsList)){
genesList <- names(idsList[idsList==k])
entrez[[k]] <- na.omit(AGIToEntrez[match(genesList, AGIToEntrez$ensembl_gene_id),]$entrezgene_id)
}
list <- names(idsList)
compareOnt <- function(idsList, universe, simCutoff = 0.8){
ckreg <- compareCluster(geneCluster = idsList, fun = "enrichGO", OrgDb = org.At.tair.db, ont = "BP", pAdjustMethod = "BH",
pvalueCutoff = 0.01, qvalueCutoff = 0.05, universe = universe)
ckreg@compareClusterResult
simCk <- clusterProfiler::simplify(ckreg, cutoff=simCutoff, by="p.adjust", select_fun=min)
resCk <- simCk@compareClusterResult
print(dotplot(simCk, x = ~Cluster, showCategory = 15, font.size = 10))
return(resCk)
}
suppressMessages(library(org.At.tair.db, warn.conflicts = F, quietly = T))
suppressMessages(library(enrichplot, warn.conflicts = F, quietly = T))
suppressMessages(library(clusterProfiler, warn.conflicts = F, quietly = T))
res <- compareOnt(entrez, universe = as.character(AGIToEntrez$entrezgene_id))
res <- compareOnt(entrez, universe = as.character(AGIToEntrez$entrezgene_id))
compareOnt <- function(idsList, universe, simCutoff = 0.8){
ckreg <- compareCluster(geneCluster = idsList, fun = "enrichGO", OrgDb = org.At.tair.db, ont = "BP", pAdjustMethod = "BH",
pvalueCutoff = 0.01, qvalueCutoff = 0.05, universe = universe)
ckreg@compareClusterResult
simCk <- clusterProfiler::simplify(ckreg, cutoff=simCutoff, by="p.adjust", select_fun=min)
resCk <- simCk@compareClusterResult
print(dotplot(simCk, x = ~Cluster, showCategory = 25, font.size = 10))
return(resCk)
}
entrez
entrez <- list()
idsList <- cluster[[1]]
for(k in 1:max(idsList)){
genesList <- names(idsList[idsList==k])
entrez[[k]] <- as.vector(na.omit(AGIToEntrez[match(genesList, AGIToEntrez$ensembl_gene_id),]$entrezgene_id))
}
entrez
res <- compareOnt(entrez, universe = as.character(AGIToEntrez$entrezgene_id))
as.character(AGIToEntrez$entrezgene_id)
res <- compareOnt(entrez, universe = na.omit(as.character(AGIToEntrez$entrezgene_id)))
entrez <- list()
idsList <- cluster[[1]]
for(k in 1:max(idsList)){
genesList <- names(idsList[idsList==k])
entrez[[as.character(k)]] <- as.vector(na.omit(AGIToEntrez[match(genesList, AGIToEntrez$ensembl_gene_id),]$entrezgene_id))
}
res <- compareOnt(entrez, universe = na.omit(as.character(AGIToEntrez$entrezgene_id)))
DEGs[[FactorCO2]]
FactorCO2 <- c(paste("cNF", "CNF"), paste("cnF", "CnF"),paste("cNf", "CNf"), paste("cnf", "Cnf"))
FactorNitrate <- c(paste("cNF", "cnF"), paste("CNF", "CnF"),paste("cNf", "cnf"), paste("CNf", "Cnf"))
FactorIron <- c(paste("cNF", "cnF"), paste("CNF", "CnF"),paste("cNf", "cnf"), paste("CNf", "Cnf"))
DEGs[[FactorCO2]]
FactorCO2
#heatmap(normalized.count[sample(genes, size = 700),!grepl("cNF_1", colnames(normalized.count))])
DEGs$FactorCO2
DEGs[FactorCO2]
read_csv("D:\These\Thesis\DEG_CombinatoireCO2_Fe_N\ArabidopsisFiltered\FactorIron", h=T)
read_csv("D:\These\Thesis\DEG_CombinatoireCO2_Fe_N\ArabidopsisFiltered\FactorIron")
read_csv("D:/These/Thesis/DEG_CombinatoireCO2_Fe_N\ArabidopsisFiltered/FactorIron")
read_csv("D:/These/Thesis/DEG_CombinatoireCO2_Fe_N/ArabidopsisFiltered/FactorIron")
read.table("D:/These/Thesis/DEG_CombinatoireCO2_Fe_N/ArabidopsisFiltered/FactorIron")
read.csv("D:/These/Thesis/DEG_CombinatoireCO2_Fe_N/ArabidopsisFiltered/FactorIron")
read_csv("D:/These/Thesis/DEG_CombinatoireCO2_Fe_N/ArabidopsisFiltered/FactorIron")
library(readr)
library("readr")
install.packages("readr")
read_csv("D:/These/Thesis/DEG_CombinatoireCO2_Fe_N/ArabidopsisFiltered/FactorIron")
library("readr")
read_csv("D:/These/Thesis/DEG_CombinatoireCO2_Fe_N/ArabidopsisFiltered/FactorIron")
a <- read_csv("D:/These/Thesis/DEG_CombinatoireCO2_Fe_N/ArabidopsisFiltered/FactorIron")
View(a)
a <- read_csv("D:/These/Thesis/DEG_CombinatoireCO2_Fe_N/ArabidopsisFiltered/FactorIron/AmbientCO2_HightNitrate_Fe-AmbientCO2_HightNitrate_FeStarvation.txt")
read.csv("D:/These/Thesis/DEG_CombinatoireCO2_Fe_N/ArabidopsisFiltered/FactorIron/AmbientCO2_HightNitrate_Fe-AmbientCO2_HightNitrate_FeStarvation.txt")
install.packages("HTSCluster")
HTSClusterUsersGuide()
library(HTSCluster)
HTSClusterUsersGuide()
install.packages("coronavirus")
library(coronavirus)
data(coronavirus)
force(coronavirus)
tail(coronavirus)
summary(coronavirus)
devtools::install_github("RamiKrispin/coronavirus")
remove.packages(coronavirus)
devtools::install_github("RamiKrispin/coronavirus")
.libPaths()
devtools::install_github("RamiKrispin/coronavirus")
remove.packages("glue")
remove.packages("coronavirus")
devtools::install_github("RamiKrispin/coronavirus")
install.packages("glue")
devtools::install_github("RamiKrispin/coronavirus")
install.packages("remotes")
devtools::install_github("RamiKrispin/coronavirus")
install_github("anjalisilva/MPLNClust", build_vignettes = TRUE)
require("devtools")
install_github("anjalisilva/MPLNClust", build_vignettes = TRUE)
require("devtools")
install.packages("Rcpp")
require("devtools")
install_github("anjalisilva/MPLNClust", build_vignettes = TRUE)
require("devtools")
install_github("anjalisilva/MPLNClust", build_vignettes = TRUE)
require("devtools")
install.packages("digest")
require("devtools")
install_github("anjalisilva/MPLNClust", build_vignettes = TRUE)
require("devtools")
install.packages(processx)
install.packages("processx")
require("devtools")
install_github("anjalisilva/MPLNClust", build_vignettes = TRUE)
install_github("anjalisilva/MPLNClust", build_vignettes = TRUE)
library(utils)
library(httr)
#download the dataset from the ECDC website to a local temporary file
GET("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv", authenticate(":", ":", type="ntlm"), write_disk(tf <- tempfile(fileext = ".csv")))
#read the Dataset sheet into “R”. The dataset will be called "data".
data <- read.csv(tf)
View(data)
GET("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv")
g <- GET("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv")
g
read.csv(g)
g$content
g <- GET("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv", authenticate(":", ":", type="ntlm"))
shiny::runApp('D:/These/NetworkShiny')
runApp('D:/These/NetworkShiny')
runApp('D:/These/NetworkShiny')
networkCoseqMatching <- list("CO2DEGenes_faibleNitrate_CO2-N.RData" = "AmbientCO2_LowNitrateFe-ElevatedCO2_LowNitrateFeNoIronStarv.RData",
"CO2DEGenes_IronStarv_CO2-Fe.RData" = "AmbientCO2_HighNitrate_FeStarvation-ElevatedCO2_HighNitrate_FeStarvation_NoNitrateStarv.RData",
"CO2DEGenes_IronStarv_LowNitrate_CO2-N-Fe.RData" = "AmbientCO2_LowNitrate_FeStarvation-ElevatedCO2_LowNitrate_FeStarvation.RData")
View(networkCoseqMatching)
View(networkCoseqMatching)
shiny::runApp('D:/These/NetworkShiny')
runApp('D:/These/NetworkShiny')
runApp()
runApp('D:/These/NetworkShiny')
runApp('D:/These/NetworkShiny')
runApp('D:/These/NetworkShiny')
devtools::install_github("MarkEdmondson1234/gentelellaShiny")
libPath''
libPath'()
libPath()
libsPath()
.libPaths()
install.packages("golem")
Sys.which("make")
library(stringr)
library(GENIE3)
library(igraph)
library(visNetwork)
library(genefilter)
setwd("D:/These/NetworkInference")
load("./Data/DEGsListsFiltered.RData")
load("Data/PlnTFBDRegulatorsList.RData")
load("./Data/normalized.count_At.RData")
load("Data/OntologyAllGenes.RData")
source("Funtions/Network_functions.R")
genes <- DEGs[["cnF CnF"]]
#rownames(ontologies) <- ontologies$ensembl_gene_id
removeNitrateStarv = F; removeIronStarv = T
if (removeIronStarv) normalized.count <- normalized.count[,grepl("F", colnames(normalized.count))]
if (removeNitrateStarv) normalized.count <- normalized.count[,grepl("N", colnames(normalized.count))]
insertSpyVariable <- function(normalized.count, name = "undercoverTF"){
means <- colMeans(normalized.count)
#undercoverTF <- rpois(lambda = as.vector(means), n = 12)
undercoverTF <- means
normalized.count <- rbind.data.frame(normalized.count, undercoverTF)
rownames(normalized.count)[dim(normalized.count)[1]] <- name
return(normalized.count)
}
genie3 <- function(normalized.count, regressors=NA, targets=NA, nTrees=5000, nCores=5,
pval = 0.05, varNorm = F){
spyName ="undercoverTF"
normalized.count <- insertSpyVariable(normalized.count, name = spyName)
regressors <- intersect(rownames(normalized.count),regressors)
regressors = c(regressors, spyName)
if (varNorm) normalized.count <- normalized.count/rowSds(normalized.count)
mat <- GENIE3(as.matrix(normalized.count), regulators = regressors, targets = targets,
treeMethod = "RF", K = "sqrt", nTrees = nTrees, nCores = nCores, verbose = T)
thrs <- mat[spyName,]
threshold = quantile(thrs, probs = 1-pval)
print(threshold)
links <- getLinkList(mat, threshold = threshold)
links <- links[!grepl(spyName, links[,1]),]
print(paste0("Number of links : ", dim(links)[1]))
g <- graph_from_data_frame(links, directed = T)
return(g)
}
net <- genie3(normalized.count,regressors = intersect(TF$AGI, genes), targets = genes, varNorm = F, pval = 0.08)
net <- genie3(normalized.count,regressors = intersect(TF$AGI, genes), targets = genes, varNorm = F, pval = 0.05)
networkToData <- function(net, ontologies, TF){
data <- toVisNetworkData(net)
data$nodes$Ontology <- ontologies[match(data$nodes$id, ontologies$ensembl_gene_id), "external_gene_name"]
data$nodes$description <- ontologies[match(data$nodes$id, ontologies$ensembl_gene_id), "description"]
data$nodes$group <- ifelse(data$nodes$id %in% TF$AGI, "Regulator", "Target Gene")
data$nodes$label <- data$nodes$Ontology
data$edges$color <- '#333366'
data$edges$value <- data$edges$weight
data$edges$Regulator_Name <-
ontologies[match(data$edges$from, ontologies$ensembl_gene_id), ]$external_gene_name
data$nodes$description <-
ifelse(
grepl("\\[", data$nodes$description),
str_split_fixed(data$nodes$description, "\\[", 2)[, 1],
data$nodes$description
)
data$edges$Target_Name <-
ontologies[match(data$edges$to, ontologies$ensembl_gene_id), ]$external_gene_name
return(data)
}
data <- networkToData(net, ontologies, TF)
plotNetwork(data)
load("./Data/NitrateGenes.RData")
data$nodes
#ajout du score nitrate
res <- data.frame(Gene = data$nodes$id)
for(paper in colnames(nGenes)){
res[,paper] <- ifelse(res$Gene %in% toupper(nGenes[,paper]), 1, 0)
}
res$NitrateScore <- rowSums(res[,grepl("_", colnames(res))])
data$nodes$NitrateScore <- res$NitrateScore
data$nodes
#ajout du cluster louvain
net <- igraph::graph_from_data_frame(d = data$edges, directed = T)
communities <- cluster_louvain(net)
#ajout du cluster louvain
net <- igraph::graph_from_data_frame(d = data$edges, directed = F)
communities <- cluster_louvain(net)
communities$membership
membership <- membership(communities)
data$nodes$louvainCluster <- membership[match(data$nodes$id, names(membership))]
newData <- data
newData$nodes$group <- newData$nodes$louvainCluster
plotNetwork(newData)
# ajout du cluster coseq
load("D:/These/ClusteringAnalysis/Clusterings/AmbientCO2_LowNitrateFe-ElevatedCO2_LowNitrateFeNoIronStarv.RData")
cluster[[1]][match(data$nodes$id, names(cluster[[1]]))]
#load("D:/These/NetworkShiny/NetworkData/CO2DEGenes_IronStarv_LowNitrate_CO2-N .RData")
data$nodes$coseqCluster <- cluster[[1]][match(data$nodes$id, names(cluster[[1]]))]
newData <- data
newData$nodes$group <- newData$nodes$clusterCluster
plotNetwork(newData)
newData$nodes$group <- newData$nodes$coseqCluster
plotNetwork(newData)
library(ggplot2)
library(corrplot)
louvain <- data$nodes$louvainCluster
names(louvain) <- data$nodes$id
coseq <- data$nodes$coseqCluster
names(coseq) <- data$nodes$id
mat <- matrix(nrow = max(louvain), ncol=max(coseq))
rownames(mat) <- 1:max(louvain)
colnames(mat) <- 1:max(coseq)
for(louv in 1:max(louvain)){
louvGenes <- names(louvain[louvain==louv])
for(cos in 1:max(coseq)){
cosGenes <- names(coseq[coseq==cos])
mat[louv,cos] <- length(intersect(louvGenes, cosGenes))
}
}
heatmap(mat)
library(ramify)
# louvain clusters in names, values is the coseq cluster with max shared genes
maxCoseqForLouvain <- argmax(mat, row=T)
install.packages("ramify")
library(ramify)
# louvain clusters in names, values is the coseq cluster with max shared genes
maxCoseqForLouvain <- argmax(mat, row=T)
consensus <- function(gene, data){
coseqClust <- data$nodes[gene,"coseqCluster"]
louvainClust <- data$nodes[gene,"louvainCluster"]
if(coseqClust == maxCoseqForLouvain[louvainClust]){
return(louvainClust)
}
else return(-1)
}
data$nodes$consensusCluster <- sapply(data$nodes$id, consensus, data)
save(data, file = "D:/These/NetworkShiny/NetworkData/CO2DEGenes_faibleNitrate_CO2-N_PvalueRandomVariable0.05.RData" )
colnames(data)
colnames(data$nodes)
data$nodes$group <- data$nodes$consensusCluster
data$edges$color <- "grey"
plotNetwork(data)%>%  visGroups(groupname = "-1", color = "lightgrey")
net <- genie3(normalized.count,regressors = intersect(TF$AGI, genes), targets = genes, varNorm = F, pval = 0.1)
net <- genie3(normalized.count,regressors = intersect(TF$AGI, genes), targets = genes, varNorm = F, pval = 0.1)
net <- genie3(normalized.count,regressors = intersect(TF$AGI, genes), targets = genes, varNorm = F, pval = 0.1)
data <- networkToData(net, ontologies, TF)
save(data, file = "D:/These/NetworkShiny/NetworkData/CO2DEGenes_faibleNitrate_CO2-N_PvalueRandomVariable0.1.RData")
plotNetwork(data)
dim(data$nodes)
dataTF <- function(data){
newData <- data
newData$nodes <- newData$nodes[newData$nodes$group == "Regulator", ]
dim(newData$nodes)
newData$edges <-
newData$edges[newData$edges$from %in% newData$nodes$id &
newData$edges$to %in% newData$nodes$id , ]
return(newData)
}
plotNetwork(dataTF(data))
#ajout du score nitrate
res <- data.frame(Gene = data$nodes$id)
for(paper in colnames(nGenes)){
res[,paper] <- ifelse(res$Gene %in% toupper(nGenes[,paper]), 1, 0)
}
res$NitrateScore <- rowSums(res[,grepl("_", colnames(res))])
res$Gene
data$nodes$NitrateScore <- res$NitrateScore
#ajout du cluster louvain
net <- igraph::graph_from_data_frame(d = data$edges, directed = F)
communities <- cluster_louvain(net)
communities$membership
membership <- membership(communities)
data$nodes$louvainCluster <- membership[match(data$nodes$id, names(membership))]
newData <- data
newData$nodes$group <- newData$nodes$coseqCluster
plotNetwork(newData)
newData$nodes$group <- newData$nodes$louvainCluster
plotNetwork(newData)
#load("D:/These/NetworkShiny/NetworkData/CO2DEGenes_IronStarv_LowNitrate_CO2-N .RData")
data$nodes$coseqCluster <- cluster[[1]][match(data$nodes$id, names(cluster[[1]]))]
newData$nodes$group <- newData$nodes$coseqCluster
plotNetwork(newData)
newData <- data
newData$nodes$group <- newData$nodes$coseqCluster
plotNetwork(newData)
louvain <- data$nodes$louvainCluster
names(louvain) <- data$nodes$id
coseq <- data$nodes$coseqCluster
names(coseq) <- data$nodes$id
mat <- matrix(nrow = max(louvain), ncol=max(coseq))
rownames(mat) <- 1:max(louvain)
colnames(mat) <- 1:max(coseq)
for(louv in 1:max(louvain)){
louvGenes <- names(louvain[louvain==louv])
for(cos in 1:max(coseq)){
cosGenes <- names(coseq[coseq==cos])
mat[louv,cos] <- length(intersect(louvGenes, cosGenes))
}
}
heatmap(mat)
library(ramify)
# louvain clusters in names, values is the coseq cluster with max shared genes
maxCoseqForLouvain <- argmax(mat, row=T)
consensus <- function(gene, data){
coseqClust <- data$nodes[gene,"coseqCluster"]
louvainClust <- data$nodes[gene,"louvainCluster"]
if(coseqClust == maxCoseqForLouvain[louvainClust]){
return(louvainClust)
}
else return(-1)
}
data$nodes$consensusCluster <- sapply(data$nodes$id, consensus, data)
save(data, file = "D:/These/NetworkShiny/NetworkData/CO2DEGenes_faibleNitrate_CO2-N_PvalueRandomVariable0.1.RData" )
colnames(data$nodes)
data$nodes$group <- data$nodes$consensusCluster
data$edges$color <- "grey"
plotNetwork(data)%>%  visGroups(groupname = "-1", color = "lightgrey")
data$nodes
net <- genie3(normalized.count,regressors = intersect(TF$AGI, genes), targets = genes, varNorm = F, pval = 0.01)
networkToData <- function(net, ontologies, TF){
data <- toVisNetworkData(net)
data$nodes$Ontology <- ontologies[match(data$nodes$id, ontologies$ensembl_gene_id), "external_gene_name"]
data$nodes$description <- ontologies[match(data$nodes$id, ontologies$ensembl_gene_id), "description"]
data$nodes$group <- ifelse(data$nodes$id %in% TF$AGI, "Regulator", "Target Gene")
data$nodes$label <- data$nodes$Ontology
data$edges$color <- '#333366'
data$edges$value <- data$edges$weight
data$edges$Regulator_Name <-
ontologies[match(data$edges$from, ontologies$ensembl_gene_id), ]$external_gene_name
data$nodes$description <-
ifelse(
grepl("\\[", data$nodes$description),
str_split_fixed(data$nodes$description, "\\[", 2)[, 1],
data$nodes$description
)
data$edges$Target_Name <-
ontologies[match(data$edges$to, ontologies$ensembl_gene_id), ]$external_gene_name
return(data)
}
data <- networkToData(net, ontologies, TF)
save(data, file = "D:/These/NetworkShiny/NetworkData/CO2DEGenes_faibleNitrate_CO2-N_PvalueRandomVariable0.01.RData")
plotNetwork(data)
plotNetwork(data)
shiny::runApp('D:/These/NetworkShiny')
runApp('D:/These/NetworkShiny')
