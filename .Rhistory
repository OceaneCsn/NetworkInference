library(knitr, warn.conflicts = F, quietly = T)
library(rmdformats, warn.conflicts = F, quietly = T)
#setwd("~/Documents/CombinatoireFeNCO2/Analyses")
setwd("D:/These/CO2NutritionAnalysis/")
## Global options
options(max.print="75")
opts_chunk$set(cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
fig.align = "center")
opts_knit$set(width=75)
suppressMessages(library(gridExtra, warn.conflicts = F, quietly = T))
suppressMessages(library(stringr, warn.conflicts = F, quietly = T))
suppressMessages(library(ggplot2, warn.conflicts = F, quietly = T))
suppressMessages(library(ggpubr, warn.conflicts = F, quietly = T))
#self written functions for differential expression
source("./Imports/ToolFunctions.R")
source("./Imports/VisuFunctions.R")
#PATH_TO_DEG <- "~/Documents/CombinatoireFeNCO2/DEG_CombinatoireCO2_Fe_N/Arabidopsis/"
PATH_TO_DEG <- "D:/These/Thesis/DEG_CombinatoireCO2_Fe_N/Arabidopsis"
geneList <- function(comp, filter=T){
filename = paste0(path,translateToOSX(comp), ".txt")
At <- read.csv(filename, h=T, sep = "\t")
if(filter){At <- At[At$MeanNormalizedExpression > 30,]}
return(At$ensembl)
}
geneList(c("cNF", "CNF"))
geneList <- function(comp, filter=T){
filename = paste0(path,translateToOSX(comp), ".txt")
At <- read.csv(filename, h=T, sep = "\t")
if(filter){At <- At[At$MeanNormalizedExpression > 30,]}
return(At$ensembl)
}
geneList(c("cNF", "CNF"))
path <- paste0(PATH_TO_DEG, "/FactorCO2/")
geneList(c("cNF", "CNF"))
geneList <- function(comp, filter=T){
filename = paste0(path,translateToOSX(comp), ".txt")
At <- read.csv(filename, h=T, sep = "\t")
if(filter){At <- At[At$MeanNormalizedExpression > 30,]}
return(At$ensembl_gene_id)
}
geneList(c("cNF", "CNF"))
geneList <- function(comp, filter=T){
filename = paste0(path,translateToOSX(comp), ".txt")
At <- read.csv(filename, h=T, sep = "\t")
if(filter){At <- At[At$MeanNormalizedExpression > 30,]}
return(as.vector(At$ensembl_gene_id))
}
geneList(c("cNF", "CNF"))
geneList(c("cnF", "CnF"))
geneList(c("cNf", "CNf"))
geneList(c("cnf", "Cnf"))
DEGs <- list()
path <- paste0(PATH_TO_DEG, "/FactorCO2/")
DEGs[[c("cNF", "CNF")]] <- geneList(c("cNF", "CNF"))
DEGs[[paste("cNF", "CNF")]] <- geneList(c("cNF", "CNF"))
View(DEGs)
DEGs <- list()
path <- paste0(PATH_TO_DEG, "/FactorCO2/")
DEGs[[paste("cNF", "CNF")]] <- geneList(c("cNF", "CNF"))
DEGs[[paste("cnF", "CnF")]] <- geneList(c("cnF", "CnF"))
DEGs[[paste("cNf", "CNf")]] <- geneList(c("cNf", "CNf"))
DEGs[[paste("cnf", "Cnf")]] <- geneList(c("cnf", "Cnf"))
path <- paste0(PATH_TO_DEG, "/FactorNitrate/")
DEGs[[paste("cNF", "cnF")]] <- geneList(c("cNF", "cnF"))
DEGs[[paste("CNF", "CnF")]] <- geneList(c("CNF", "CnF"))
DEGs[[paste("cNf", "cnf")]] <- geneList(c("cNf", "cnf"))
DEGs[[paste("CNf", "Cnf")]] <- geneList(c("CNf", "Cnf"))
path <- paste0(PATH_TO_DEG, "/FactorIron/")
DEGs[[paste("cNF", "cNf")]] <- geneList(c("cNF", "cNf"))
DEGs[[paste("cnF", "cnf")]] <- geneList(c("cnF", "cnf"))
DEGs[[paste("CNF", "CNf")]] <- geneList(c("CNF", "CNf"))
DEGs[[paste("CnF", "Cnf")]] <- geneList(c("CnF", "Cnf"))
View(DEGs)
save(DEGs, file = "./Data/DEGsFilterLists.RData")
geneList <- function(comp, filter=F){
filename = paste0(path,translateToOSX(comp), ".txt")
At <- read.csv(filename, h=T, sep = "\t")
if(filter){At <- At[At$MeanNormalizedExpression > 30,]}
return(as.vector(At$ensembl_gene_id))
}
DEGs <- list()
path <- paste0(PATH_TO_DEG, "/FactorCO2/")
DEGs[[paste("cNF", "CNF")]] <- geneList(c("cNF", "CNF"))
DEGs[[paste("cnF", "CnF")]] <- geneList(c("cnF", "CnF"))
DEGs[[paste("cNf", "CNf")]] <- geneList(c("cNf", "CNf"))
DEGs[[paste("cnf", "Cnf")]] <- geneList(c("cnf", "Cnf"))
path <- paste0(PATH_TO_DEG, "/FactorNitrate/")
DEGs[[paste("cNF", "cnF")]] <- geneList(c("cNF", "cnF"))
DEGs[[paste("CNF", "CnF")]] <- geneList(c("CNF", "CnF"))
DEGs[[paste("cNf", "cnf")]] <- geneList(c("cNf", "cnf"))
DEGs[[paste("CNf", "Cnf")]] <- geneList(c("CNf", "Cnf"))
path <- paste0(PATH_TO_DEG, "/FactorIron/")
DEGs[[paste("cNF", "cNf")]] <- geneList(c("cNF", "cNf"))
DEGs[[paste("cnF", "cnf")]] <- geneList(c("cnF", "cnf"))
DEGs[[paste("CNF", "CNf")]] <- geneList(c("CNF", "CNf"))
DEGs[[paste("CnF", "Cnf")]] <- geneList(c("CnF", "Cnf"))
save(DEGs, file = "./Data/DEGsLists.RData")
genes <- unlist(DEGs)
genes <- unique(unlist(DEGs))
load("./Data/normalized.count_At.RData")
cluster <- clustering(genes, normalized.count, nb_clusters = 5:20)
round(normalized.count, 0)
cluster <- clustering(genes, round(normalized.count, 0), nb_clusters = 5:20)
cluster <- clustering(genes, round(normalized.count, 0), nb_clusters = 14:15)
heatmap(normalized.count[sample(genes, size = 700),])
heatmap(normalized.count[sample(genes, size = 700),grep("cNF", colnames(normalized.count))])
heatmap(normalized.count[sample(genes, size = 700),grep("cNF", colnames(normalized.count))])
heatmap(normalized.count[sample(genes, size = 700),grep("cNF", colnames(normalized.count))])
heatmap(normalized.count[sample(genes, size = 700),grep("cNF", colnames(normalized.count))])
heatmap(normalized.count[sample(genes, size = 700),grep("cNF", colnames(normalized.count))])
heatmap(normalized.count[sample(genes, size = 700),grep("cNF", colnames(normalized.count))])
heatmap(normalized.count[sample(genes, size = 700),grep("cNF", colnames(normalized.count))])
heatmap(normalized.count[sample(genes, size = 700),grep("cNF", colnames(normalized.count))])
heatmap(normalized.count[sample(genes, size = 700),grep("cNF", colnames(normalized.count))])
heatmap(normalized.count[sample(genes, size = 700),!grepl("cNF_1", colnames(normalized.count))])
heatmap(normalized.count[sample(genes, size = 700),!grepl("cNF_1", colnames(normalized.count))])
genes <- unique(unlist(DEGs))
heatmap(normalized.count[sample(genes, size = 700),!grepl("cNF_1", colnames(normalized.count))])
cluster <- clustering(genes, round(normalized.count[,!grepl("cNF_1", colnames(normalized.count))], 0), nb_clusters = 8:14)
cluster <- clustering(genes, round(normalized.count, 0), nb_clusters = 8:14)
idsList <- cluster[[1]]
idsList
list <- names(idsList)
names(list) <- as.vector(idsList)
list
list(list)
as.list(list)
idsList
load("./Data/AGIToEntrez.RDAta")
View(AGIToEntrez)
entrez <- list()
idsList <- cluster[[1]]
for(k in 1:max(names(idsList))){
genesList <- names(idsList[idsList==k])
entrez[[k]] <- AGIToEntrez[match(genesList, AGIToEntrez$ensembl_gene_id),]$entrezgene_id
}
entrez <- list()
idsList <- cluster[[1]]
for(k in 1:max(idsList)){
genesList <- names(idsList[idsList==k])
entrez[[k]] <- AGIToEntrez[match(genesList, AGIToEntrez$ensembl_gene_id),]$entrezgene_id
}
entrez
entrez <- list()
idsList <- cluster[[1]]
for(k in 1:max(idsList)){
genesList <- names(idsList[idsList==k])
entrez[[k]] <- na.omit(AGIToEntrez[match(genesList, AGIToEntrez$ensembl_gene_id),]$entrezgene_id)
}
list <- names(idsList)
compareOnt <- function(idsList, universe, simCutoff = 0.8){
ckreg <- compareCluster(geneCluster = idsList, fun = "enrichGO", OrgDb = org.At.tair.db, ont = "BP", pAdjustMethod = "BH",
pvalueCutoff = 0.01, qvalueCutoff = 0.05, universe = universe)
ckreg@compareClusterResult
simCk <- clusterProfiler::simplify(ckreg, cutoff=simCutoff, by="p.adjust", select_fun=min)
resCk <- simCk@compareClusterResult
print(dotplot(simCk, x = ~Cluster, showCategory = 15, font.size = 10))
return(resCk)
}
suppressMessages(library(org.At.tair.db, warn.conflicts = F, quietly = T))
suppressMessages(library(enrichplot, warn.conflicts = F, quietly = T))
suppressMessages(library(clusterProfiler, warn.conflicts = F, quietly = T))
res <- compareOnt(entrez, universe = as.character(AGIToEntrez$entrezgene_id))
res <- compareOnt(entrez, universe = as.character(AGIToEntrez$entrezgene_id))
compareOnt <- function(idsList, universe, simCutoff = 0.8){
ckreg <- compareCluster(geneCluster = idsList, fun = "enrichGO", OrgDb = org.At.tair.db, ont = "BP", pAdjustMethod = "BH",
pvalueCutoff = 0.01, qvalueCutoff = 0.05, universe = universe)
ckreg@compareClusterResult
simCk <- clusterProfiler::simplify(ckreg, cutoff=simCutoff, by="p.adjust", select_fun=min)
resCk <- simCk@compareClusterResult
print(dotplot(simCk, x = ~Cluster, showCategory = 25, font.size = 10))
return(resCk)
}
entrez
entrez <- list()
idsList <- cluster[[1]]
for(k in 1:max(idsList)){
genesList <- names(idsList[idsList==k])
entrez[[k]] <- as.vector(na.omit(AGIToEntrez[match(genesList, AGIToEntrez$ensembl_gene_id),]$entrezgene_id))
}
entrez
res <- compareOnt(entrez, universe = as.character(AGIToEntrez$entrezgene_id))
as.character(AGIToEntrez$entrezgene_id)
res <- compareOnt(entrez, universe = na.omit(as.character(AGIToEntrez$entrezgene_id)))
entrez <- list()
idsList <- cluster[[1]]
for(k in 1:max(idsList)){
genesList <- names(idsList[idsList==k])
entrez[[as.character(k)]] <- as.vector(na.omit(AGIToEntrez[match(genesList, AGIToEntrez$ensembl_gene_id),]$entrezgene_id))
}
res <- compareOnt(entrez, universe = na.omit(as.character(AGIToEntrez$entrezgene_id)))
DEGs[[FactorCO2]]
FactorCO2 <- c(paste("cNF", "CNF"), paste("cnF", "CnF"),paste("cNf", "CNf"), paste("cnf", "Cnf"))
FactorNitrate <- c(paste("cNF", "cnF"), paste("CNF", "CnF"),paste("cNf", "cnf"), paste("CNf", "Cnf"))
FactorIron <- c(paste("cNF", "cnF"), paste("CNF", "CnF"),paste("cNf", "cnf"), paste("CNf", "Cnf"))
DEGs[[FactorCO2]]
FactorCO2
#heatmap(normalized.count[sample(genes, size = 700),!grepl("cNF_1", colnames(normalized.count))])
DEGs$FactorCO2
DEGs[FactorCO2]
read_csv("D:\These\Thesis\DEG_CombinatoireCO2_Fe_N\ArabidopsisFiltered\FactorIron", h=T)
read_csv("D:\These\Thesis\DEG_CombinatoireCO2_Fe_N\ArabidopsisFiltered\FactorIron")
read_csv("D:/These/Thesis/DEG_CombinatoireCO2_Fe_N\ArabidopsisFiltered/FactorIron")
read_csv("D:/These/Thesis/DEG_CombinatoireCO2_Fe_N/ArabidopsisFiltered/FactorIron")
read.table("D:/These/Thesis/DEG_CombinatoireCO2_Fe_N/ArabidopsisFiltered/FactorIron")
read.csv("D:/These/Thesis/DEG_CombinatoireCO2_Fe_N/ArabidopsisFiltered/FactorIron")
read_csv("D:/These/Thesis/DEG_CombinatoireCO2_Fe_N/ArabidopsisFiltered/FactorIron")
library(readr)
library("readr")
install.packages("readr")
read_csv("D:/These/Thesis/DEG_CombinatoireCO2_Fe_N/ArabidopsisFiltered/FactorIron")
library("readr")
read_csv("D:/These/Thesis/DEG_CombinatoireCO2_Fe_N/ArabidopsisFiltered/FactorIron")
a <- read_csv("D:/These/Thesis/DEG_CombinatoireCO2_Fe_N/ArabidopsisFiltered/FactorIron")
View(a)
a <- read_csv("D:/These/Thesis/DEG_CombinatoireCO2_Fe_N/ArabidopsisFiltered/FactorIron/AmbientCO2_HightNitrate_Fe-AmbientCO2_HightNitrate_FeStarvation.txt")
read.csv("D:/These/Thesis/DEG_CombinatoireCO2_Fe_N/ArabidopsisFiltered/FactorIron/AmbientCO2_HightNitrate_Fe-AmbientCO2_HightNitrate_FeStarvation.txt")
install.packages("HTSCluster")
HTSClusterUsersGuide()
library(HTSCluster)
HTSClusterUsersGuide()
install.packages("coronavirus")
library(coronavirus)
data(coronavirus)
force(coronavirus)
tail(coronavirus)
summary(coronavirus)
devtools::install_github("RamiKrispin/coronavirus")
remove.packages(coronavirus)
devtools::install_github("RamiKrispin/coronavirus")
.libPaths()
devtools::install_github("RamiKrispin/coronavirus")
remove.packages("glue")
remove.packages("coronavirus")
devtools::install_github("RamiKrispin/coronavirus")
install.packages("glue")
devtools::install_github("RamiKrispin/coronavirus")
install.packages("remotes")
devtools::install_github("RamiKrispin/coronavirus")
install_github("anjalisilva/MPLNClust", build_vignettes = TRUE)
require("devtools")
install_github("anjalisilva/MPLNClust", build_vignettes = TRUE)
require("devtools")
install.packages("Rcpp")
require("devtools")
install_github("anjalisilva/MPLNClust", build_vignettes = TRUE)
require("devtools")
install_github("anjalisilva/MPLNClust", build_vignettes = TRUE)
require("devtools")
install.packages("digest")
require("devtools")
install_github("anjalisilva/MPLNClust", build_vignettes = TRUE)
require("devtools")
install.packages(processx)
install.packages("processx")
require("devtools")
install_github("anjalisilva/MPLNClust", build_vignettes = TRUE)
install_github("anjalisilva/MPLNClust", build_vignettes = TRUE)
library(utils)
library(httr)
#download the dataset from the ECDC website to a local temporary file
GET("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv", authenticate(":", ":", type="ntlm"), write_disk(tf <- tempfile(fileext = ".csv")))
#read the Dataset sheet into “R”. The dataset will be called "data".
data <- read.csv(tf)
View(data)
GET("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv")
g <- GET("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv")
g
read.csv(g)
g$content
g <- GET("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv", authenticate(":", ":", type="ntlm"))
install.packages("diceR")
library(diceR)
help(diceR)
data(fingerprintMat)
install.packages("IntClust")
library(IntClust)
data(fingerprintMat)
data(targetMat)
data(geneMat)
data(GeneInfo)
MCF7_F = Cluster(fingerprintMat,type="data",distmeasure="tanimoto",normalize=FALSE,
method=NULL,clust="agnes",linkage="flexible",gap=FALSE,maxK=55,StopRange=FALSE)
MCF7_T = Cluster(targetMat,type="data",distmeasure="tanimoto",normalize=FALSE,
method=NULL,clust="agnes",linkage="flexible",gap=FALSE,maxK=55,StopRange=FALSE)
Comps=SharedComps(List=L,nrclusters=7,fusionsLog=FALSE,weightclust=FALSE,names=names)
L=list(MCF7_F,MCF7_T)
names=c('FP','TP')
Comps=SharedComps(List=L,nrclusters=7,fusionsLog=FALSE,weightclust=FALSE,names=names)
View(Comps)
MCF7_F
HeatmapPlot(Data1=MCF7_T,Data2=MCF7_F,names=rownames(fingerprintMat)
,nrclusters=7,cols=Colors1,plottype="new", location=NULL)
############ comparer louvain et coseq
load("D:/These/NetworkShiny/NetworkData/CO2DEGenes_IronStarv_LowNitrate_CO2-N-Fe.RData")
library(ggplot2)
library(corrplot)
louvain <- data$nodes$louvainCluster
coseq <- data$nodes$coseqCluster
louvain
names(louvain) <- data$nodes$id
names(coseq) <- data$nodes$id
max(louvain)
max(coseq)
matrix(dimnames = list(1:max(louvain), 1:mac(coseq)))
matrix(dimnames = list(1:max(louvain), 1:max(coseq)))
1:max(louvain)
1:max(coseq)
list(1:max(louvain), 1:max(coseq)))
list(1:max(louvain), 1:max(coseq))
matrix(nrow = max(louvain), ncol=max(coseq))
rownames(mat) <- 1:max(louvain)
mat <- matrix(nrow = max(louvain), ncol=max(coseq))
rownames(mat) <- 1:max(louvain)
names(mat) <- 1:max(coseq))
names(mat) <- 1:max(coseq)
mat
mat <- matrix(nrow = max(louvain), ncol=max(coseq))
rownames(mat) <- 1:max(louvain)
colnames(mat) <- 1:max(coseq)
mat
for(louv in louvain){
for(cos in coseq){
mat[louv,cos] <- sum(louvain[louvain==coseq])
}
}
mat
for(louv in 1:max(louvain)){
for(cos in 1:max(coseq)){
mat[louv,cos] <- sum(louvain[louvain==coseq])
}
}
mat
for(louv in 1:max(louvain)){
for(cos in 1:max(coseq)){
mat[louv,cos] <- sum(louvain[louv==cos])
}
}
mat
dim(data$nodes)
for(louv in 1:max(louvain)){
louvGenes <- names(louvain[louvain==louv])
for(cos in 1:max(coseq)){
cosGenes <- names(coseq[coseq==cos])
mat[louv,cos] <- intersect(louvGenes, cosGenes)
}
}
for(louv in 1:max(louvain)){
louvGenes <- names(louvain[louvain==louv])
for(cos in 1:max(coseq)){
cosGenes <- names(coseq[coseq==cos])
mat[louv,cos] <- length(intersect(louvGenes, cosGenes))
}
}
mat
corrplot(mat)
heatmap(mat)
plot(mat)
heatmap(mat)
names(consensus) <- data$nodes$id
consensus <- c()
names(consensus) <- data$nodes$id
names(matching) <- 1:max(louvain)
matching <- list()
names(matching) <- 1:max(louvain)
mat[1,]
argmax(mat[1,])
install.packages("ramify")
argmax(mat[1,])
library(ramify)
argmax(mat[1,])
argmax(mat)
argmax(mat, row=F)
mat
argmax(mat, row=T)
library(reshape2)
dat <- melt(mat)
View(dat)
ggplot(data = dat,aes(x = Var1, y = value)) +
geom_point(data = dat,aes(pch = factor(Var2), colour = factor(Var2))) +
xlab('Genes') + scale_shape_discrete(name="LegendTitle") + scale_colour_discrete(name="LegendTitle")
maxCoseqForLouvain <- argmax(mat, row=T)
maxCoseqForLouvain[2]
consensus <- function(data, gene){
coseqClust <- data$nodes[gene,"coseqCluster"]
louvainClust <- data$nodes[gene,"louvainCluster"]
if(coseqClust == maxCoseqForLouvain[louvainClust]){
return(louvainClust)
}
else return(-1)
}
sapply(data$nodes$id, consensus)
data$nodes$id
sapply(data$nodes$id, consensus)
consensus
consensus <- function(gene, data){
coseqClust <- data$nodes[gene,"coseqCluster"]
louvainClust <- data$nodes[gene,"louvainCluster"]
if(coseqClust == maxCoseqForLouvain[louvainClust]){
return(louvainClust)
}
else return(-1)
}
sapply(data$nodes$id, consensus, data)
data$nodes$consensusCluster <- sapply(data$nodes$id, consensus, data)
library(visNetwork)
source("Funtions/Network_functions.R")
setwd("D:/These/NetworkInference")
source("Funtions/Network_functions.R")
data$nodes$group <- data$nodes$consensusCluster
plotNetwork(data)
data$edges
data$edges$color <- "grey"
plotNetwork(data)
plotNetwork(data)%>%  visGroups(groupname = "-1", color = "lightgrey")
shiny::runApp('D:/These/NetworkShiny')
load("D:/These/NetworkShiny/NetworkData/CO2DEGenes_IronStarv_LowNitrate_CO2-N-Fe.RData")
louvain <- data$nodes$louvainCluster
names(louvain) <- data$nodes$id
coseq <- data$nodes$coseqCluster
names(coseq) <- data$nodes$id
mat <- matrix(nrow = max(louvain), ncol=max(coseq))
rownames(mat) <- 1:max(louvain)
colnames(mat) <- 1:max(coseq)
for(louv in 1:max(louvain)){
louvGenes <- names(louvain[louvain==louv])
for(cos in 1:max(coseq)){
cosGenes <- names(coseq[coseq==cos])
mat[louv,cos] <- length(intersect(louvGenes, cosGenes))
}
}
heatmap(mat)
library(ramify)
# louvain clusters in names, values is the coseq cluster with max shared genes
maxCoseqForLouvain <- argmax(mat, row=T)
consensus <- function(gene, data){
coseqClust <- data$nodes[gene,"coseqCluster"]
louvainClust <- data$nodes[gene,"louvainCluster"]
if(coseqClust == maxCoseqForLouvain[louvainClust]){
return(louvainClust)
}
else return(-1)
}
data$nodes$consensusCluster <- sapply(data$nodes$id, consensus, data)
data$nodes$consensusCluster
save(data, file = "D:/These/NetworkShiny/NetworkData/CO2DEGenes_IronStarv_LowNitrate_CO2-N-Fe.RData" )
load("D:/These/NetworkShiny/NetworkData/CO2DEGenes_faibleNitrate_CO2-N.RData")
louvain <- data$nodes$louvainCluster
names(louvain) <- data$nodes$id
coseq <- data$nodes$coseqCluster
names(coseq) <- data$nodes$id
mat <- matrix(nrow = max(louvain), ncol=max(coseq))
rownames(mat) <- 1:max(louvain)
colnames(mat) <- 1:max(coseq)
for(louv in 1:max(louvain)){
louvGenes <- names(louvain[louvain==louv])
for(cos in 1:max(coseq)){
cosGenes <- names(coseq[coseq==cos])
mat[louv,cos] <- length(intersect(louvGenes, cosGenes))
}
}
heatmap(mat)
library(ramify)
# louvain clusters in names, values is the coseq cluster with max shared genes
maxCoseqForLouvain <- argmax(mat, row=T)
consensus <- function(gene, data){
coseqClust <- data$nodes[gene,"coseqCluster"]
louvainClust <- data$nodes[gene,"louvainCluster"]
if(coseqClust == maxCoseqForLouvain[louvainClust]){
return(louvainClust)
}
else return(-1)
}
data$nodes$consensusCluster <- sapply(data$nodes$id, consensus, data)
save(data, file = "D:/These/NetworkShiny/NetworkData/CO2DEGenes_faibleNitrate_CO2-N.RData" )
load("D:/These/NetworkShiny/NetworkData/CO2DEGenes_IronStarv_CO2-Fe.RData")
louvain <- data$nodes$louvainCluster
names(louvain) <- data$nodes$id
coseq <- data$nodes$coseqCluster
names(coseq) <- data$nodes$id
mat <- matrix(nrow = max(louvain), ncol=max(coseq))
rownames(mat) <- 1:max(louvain)
colnames(mat) <- 1:max(coseq)
for(louv in 1:max(louvain)){
louvGenes <- names(louvain[louvain==louv])
for(cos in 1:max(coseq)){
cosGenes <- names(coseq[coseq==cos])
mat[louv,cos] <- length(intersect(louvGenes, cosGenes))
}
}
heatmap(mat)
library(ramify)
# louvain clusters in names, values is the coseq cluster with max shared genes
maxCoseqForLouvain <- argmax(mat, row=T)
consensus <- function(gene, data){
coseqClust <- data$nodes[gene,"coseqCluster"]
louvainClust <- data$nodes[gene,"louvainCluster"]
if(coseqClust == maxCoseqForLouvain[louvainClust]){
return(louvainClust)
}
else return(-1)
}
data$nodes$consensusCluster <- sapply(data$nodes$id, consensus, data)
save(data, file = "D:/These/NetworkShiny/NetworkData/CO2DEGenes_IronStarv_CO2-Fe.RData" )
runApp('D:/These/NetworkShiny')
data$nodes
runApp('D:/These/NetworkShiny')
