install.packages("HTSCluster")
HTSClusterUsersGuide()
library(HTSCluster)
HTSClusterUsersGuide()
install.packages("coronavirus")
library(coronavirus)
data(coronavirus)
force(coronavirus)
tail(coronavirus)
summary(coronavirus)
devtools::install_github("RamiKrispin/coronavirus")
remove.packages(coronavirus)
devtools::install_github("RamiKrispin/coronavirus")
.libPaths()
devtools::install_github("RamiKrispin/coronavirus")
remove.packages("glue")
remove.packages("coronavirus")
devtools::install_github("RamiKrispin/coronavirus")
install.packages("glue")
devtools::install_github("RamiKrispin/coronavirus")
install.packages("remotes")
devtools::install_github("RamiKrispin/coronavirus")
install_github("anjalisilva/MPLNClust", build_vignettes = TRUE)
require("devtools")
install_github("anjalisilva/MPLNClust", build_vignettes = TRUE)
require("devtools")
install.packages("Rcpp")
require("devtools")
install_github("anjalisilva/MPLNClust", build_vignettes = TRUE)
require("devtools")
install_github("anjalisilva/MPLNClust", build_vignettes = TRUE)
require("devtools")
install.packages("digest")
require("devtools")
install_github("anjalisilva/MPLNClust", build_vignettes = TRUE)
require("devtools")
install.packages(processx)
install.packages("processx")
require("devtools")
install_github("anjalisilva/MPLNClust", build_vignettes = TRUE)
install_github("anjalisilva/MPLNClust", build_vignettes = TRUE)
library(utils)
library(httr)
#download the dataset from the ECDC website to a local temporary file
GET("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv", authenticate(":", ":", type="ntlm"), write_disk(tf <- tempfile(fileext = ".csv")))
#read the Dataset sheet into “R”. The dataset will be called "data".
data <- read.csv(tf)
View(data)
GET("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv")
g <- GET("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv")
g
read.csv(g)
g$content
g <- GET("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv", authenticate(":", ":", type="ntlm"))
shiny::runApp('D:/These/NetworkShiny')
runApp('D:/These/NetworkShiny')
runApp('D:/These/NetworkShiny')
networkCoseqMatching <- list("CO2DEGenes_faibleNitrate_CO2-N.RData" = "AmbientCO2_LowNitrateFe-ElevatedCO2_LowNitrateFeNoIronStarv.RData",
"CO2DEGenes_IronStarv_CO2-Fe.RData" = "AmbientCO2_HighNitrate_FeStarvation-ElevatedCO2_HighNitrate_FeStarvation_NoNitrateStarv.RData",
"CO2DEGenes_IronStarv_LowNitrate_CO2-N-Fe.RData" = "AmbientCO2_LowNitrate_FeStarvation-ElevatedCO2_LowNitrate_FeStarvation.RData")
View(networkCoseqMatching)
View(networkCoseqMatching)
shiny::runApp('D:/These/NetworkShiny')
runApp('D:/These/NetworkShiny')
runApp()
runApp('D:/These/NetworkShiny')
runApp('D:/These/NetworkShiny')
runApp('D:/These/NetworkShiny')
devtools::install_github("MarkEdmondson1234/gentelellaShiny")
libPath''
libPath'()
libPath()
libsPath()
.libPaths()
install.packages("golem")
Sys.which("make")
load("D:/These/CO2NutritionAnalysis/Data/normalized.count_At.RData")
geneList <- c("AT5G65230", "AT5G16770", "AT1G34670", "AT5G16770", "AT1G58100",
"AT4G11880", "AT4G38620", "AT3G19580", "AT3G03660")
library(ggplot2)
library(gridExtra)
conds = c("cnF", "CnF")
conds = grepl(conds[1], colnames(normalized.count)) | grepl(conds[2], colnames(normalized.count))
conds = c("cnF", "CnF")
conds = grepl(conds[1], colnames(normalized.count)) | grepl(conds[2], colnames(normalized.count))
df <- normalized.count[geneList, conds]
d<- melt(df, silent=T)
library(reshape2)
df <- normalized.count[geneList, conds]
d<- melt(df, silent=T)
View(d)
d$group = str_split_fixed(d$Var2, "_", 2)[,1]
library(stringr)
d$group = str_split_fixed(d$Var2, "_", 2)[,1]
geneList <- c("AT5G65230", "AT5G16770", "AT1G34670", "AT5G16770", "AT1G58100",
"AT4G11880", "AT4G38620", "AT3G19580", "AT3G03660")
conds = c("cnF", "CnF")
conds = grepl(conds[1], colnames(normalized.count)) | grepl(conds[2], colnames(normalized.count))
df <- normalized.count[geneList, conds]
d<- melt(df, silent=T)
d$group = str_split_fixed(d$Var2, "_", 2)[,1]
load("D:/These/CO2NutritionAnalysis/Data/OntologyAllGenes.RData")
d$Name = data[match(d$Var1, ontologies$ensembl_gene_id),"external_gene_name"]
ontologies
d$Var1
d$Name = ontologies[match(d$Var1, ontologies$ensembl_gene_id),"external_gene_name"]
ggplot(data = d, aes(x=group, y=value, fill=group)) + geom_dotplot(binaxis = "y", stackdir = "center", dotsize = 2.5, alpha = 0.8) +
scale_fill_manual(name = "Conditions", labels = c("Ambient CO2", "Elevated CO2"), values = c('#006666','#D35400')) + facet_wrap(~Name, nrow=3, scales="free") + ggtitle("Repressors of nitrate pathways") +
theme(strip.text.x = element_text(size = 20), plot.title = element_text(size=25, face="bold"),
legend.title = element_text(size = 25, face="bold"), legend.text = element_text(size=24),
axis.text.y = element_text(size = 8, angle = 30), axis.text.x = element_text(size = 0),
axis.title=element_text("",size=17)) + ylab("Normalized counts") + xlab("")
ggplot(data = d, aes(x=group, y=value, fill=group)) + geom_dotplot(binaxis = "y", stackdir = "center", dotsize = 2.5, alpha = 0.8) +
scale_fill_manual(name = "Conditions", labels = c("Ambient CO2", "Elevated CO2"), values = c('#006666','#D35400')) + facet_wrap(~Name, nrow=3, scales="free") + ggtitle("Repressors of nitrate pathways") +
theme(strip.text.x = element_text(size = 20), plot.title = element_text(size=25, face="bold"),
legend.title = element_text(size = 25, face="bold"), legend.text = element_text(size=24),
axis.text.y = element_text(size = 12, angle = 30), axis.text.x = element_text(size = 0),
axis.title=element_text("",size=17)) + ylab("Normalized counts") + xlab("")
geneList <- c("AT5G65230", "AT5G16770", "AT1G34670", "AT1G58100",
"AT4G11880", "AT4G38620", "AT3G19580", "AT3G03660")
df <- normalized.count[geneList, conds]
d<- melt(df, silent=T)
d$group = str_split_fixed(d$Var2, "_", 2)[,1]
d$Name = ontologies[match(d$Var1, ontologies$ensembl_gene_id),"external_gene_name"]
ggplot(data = d, aes(x=group, y=value, fill=group)) + geom_dotplot(binaxis = "y", stackdir = "center", dotsize = 2.5, alpha = 0.8) +
scale_fill_manual(name = "Conditions", labels = c("Ambient CO2", "Elevated CO2"), values = c('#006666','#D35400')) + facet_wrap(~Name, nrow=3, scales="free") + ggtitle("Genes linked to root growth") +
theme(strip.text.x = element_text(size = 20), plot.title = element_text(size=25, face="bold"),
legend.title = element_text(size = 25, face="bold"), legend.text = element_text(size=24),
axis.text.y = element_text(size = 12, angle = 30), axis.text.x = element_text(size = 0),
axis.title=element_text("",size=17)) + ylab("Normalized counts") + xlab("")
install.packages("devtools")
devtools::install_github("daattali/colourpicker")
colourpicker:::colourPickerAddin()
library(ggplot2)
library(gridExtra)
library(reshape2)
library(stringr)
geneList <- c("AT5G65230", "AT5G16770", "AT1G34670", "AT1G58100",
"AT4G11880", "AT4G38620", "AT3G19580", "AT3G03660")
load("D:/These/CO2NutritionAnalysis/Data/OntologyAllGenes.RData")
conds = c("cnF", "CnF")
conds = grepl(conds[1], colnames(normalized.count)) | grepl(conds[2], colnames(normalized.count))
df <- normalized.count[geneList, conds]
d<- melt(df, silent=T)
d$group = str_split_fixed(d$Var2, "_", 2)[,1]
d$Name = ontologies[match(d$Var1, ontologies$ensembl_gene_id),"external_gene_name"]
load("./Data/normalized.count_At.RData")
load("D:/These/NetworkInference/Data/normalized.count_At.RData")
conds = c("cnF", "CnF")
conds = grepl(conds[1], colnames(normalized.count)) | grepl(conds[2], colnames(normalized.count))
df <- normalized.count[geneList, conds]
d<- melt(df, silent=T)
d$group = str_split_fixed(d$Var2, "_", 2)[,1]
d$Name = ontologies[match(d$Var1, ontologies$ensembl_gene_id),"external_gene_name"]
ggplot(data = d, aes(x=group, y=value, fill=group)) + geom_dotplot(binaxis = "y", stackdir = "center", dotsize = 2.5, alpha = 0.8) +
scale_fill_manual(name = "Conditions", labels = c("Ambient CO2", "Elevated CO2"), values = c('#006666','#D35400')) + facet_wrap(~Name, nrow=3, scales="free") + ggtitle("Genes linked to root growth") +
theme(strip.text.x = element_text(size = 20), plot.title = element_text(size=25, face="bold"),
legend.title = element_text(size = 25, face="bold"), legend.text = element_text(size=24),
axis.text.y = element_text(size = 12, angle = 30), axis.text.x = element_text(size = 0),
axis.title=element_text("",size=17)) + ylab("Normalized counts") + xlab("")
colourpicker:::plotHelperAddin()
install.packages("ggThemeAssist")
g <- ggplot(data = d, aes(x=group, y=value, fill=group)) + geom_dotplot(binaxis = "y", stackdir = "center", dotsize = 2.5, alpha = 0.8) +
scale_fill_manual(name = "Conditions", labels = c("Ambient CO2", "Elevated CO2"), values = c('#006666','#D35400')) + facet_wrap(~Name, nrow=3, scales="free") + ggtitle("Genes linked to root growth") +
theme(strip.text.x = element_text(size = 20), plot.title = element_text(size=25, face="bold"),
legend.title = element_text(size = 25, face="bold"), legend.text = element_text(size=24),
axis.text.y = element_text(size = 12, angle = 30), axis.text.x = element_text(size = 0),
axis.title=element_text("",size=17)) + ylab("Normalized counts") + xlab("")
g
ggThemeAssist:::ggThemeAssistAddin()
g <- g + theme(axis.ticks = element_line(colour  =  'gray82'))
g <- g + theme(panel.grid.major = element_line(size  =  0.8))
g <- g + theme(axis.title = element_text(family  =  'sans'))
g <- g + theme(axis.text = element_text(size  =  2))
g <- g + theme(axis.text.x = element_text(size  =  20))
g <- g + theme(panel.background = element_rect(fill  =  'gray85', linetype  =  'dotted'))
g <- g + theme(legend.key = element_rect(fill  =  'gray100', colour  =  'aliceblue', size  =  2))
g <- g + labs(x  =  NULL, subtitle  =  'Coucou je suis un plot')
g
devtools::install_github("lorenzwalthert/strcode")
remotes::install_github("ThinkR-open/remedy")
remotes::install_github("OceaneCsn/DIANE")
library(DIANE)
DIANE::run_app()
remotes::install_github("OceaneCsn/DIANE")
library(DIANE)
DIANE::run_app()
remotes::install_github("OceaneCsn/DIANE")
library(DIANE)
DIANE::run_app()
remotes::install_github("OceaneCsn/DIANE")
library(DIANE)
DIANE::run_app()
runGitHub("DIANE", "OceaneCsn")
library(ggplot2)
library(plotly)
library(ggplot2)
library(gridExtra)
library(reshape2)
library(stringr)
source("./Imports/ToolFunctions.R")
load("D:/These/NetworkInference/Data/normalized.count_At.RData")
geneList <- c("AT5G65230", "AT5G16770", "AT1G34670", "AT1G58100",
"AT4G11880", "AT4G38620", "AT3G19580", "AT3G03660")
load("D:/These/CO2NutritionAnalysis/Data/OntologyAllGenes.RData")
conds = c("cnF", "CnF")
conds = grepl(conds[1], colnames(normalized.count)) | grepl(conds[2], colnames(normalized.count))
df <- normalized.count[geneList, conds]
d<- melt(df, silent=T)
d$group = str_split_fixed(d$Var2, "_", 2)[,1]
d$Name = ontologies[match(d$Var1, ontologies$ensembl_gene_id),"external_gene_name"]
ggplot(data = d, aes(x=group, y=value, fill=group)) + geom_dotplot(binaxis = "y", stackdir = "center", dotsize = 2.5, alpha = 0.8) +
scale_fill_manual(name = "Conditions", labels = c("Ambient CO2", "Elevated CO2"), values = c('#006666','#D35400')) + facet_wrap(~Name, nrow=3, scales="free") + ggtitle("Genes linked to root growth") +
theme(strip.text.x = element_text(size = 20), plot.title = element_text(size=25, face="bold"),
legend.title = element_text(size = 25, face="bold"), legend.text = element_text(size=24),
axis.text.y = element_text(size = 12, angle = 30), axis.text.x = element_text(size = 0),
axis.title=element_text("",size=17)) + ylab("Normalized counts") + xlab("")
genesCand <- c("TCP8", "AGL14", "AZF2", "WOX11", "MYB93", "MYB9", "HHO3", "HRS1","WRK6")
ontologies[ontologies$external_gene_name %in% genesCand,]
geneList <- c("AT5G65230", "AT5G16770", "AT1G34670", "AT1G58100",
"AT4G11880",  "AT3G19580", "AT3G03660")
conds = c("cnF", "CnF")
conds = grepl(conds[1], colnames(normalized.count)) | grepl(conds[2], colnames(normalized.count))
df <- normalized.count[geneList, conds]
d<- melt(df, silent=T)
d$group = str_split_fixed(d$Var2, "_", 2)[,1]
d$Name = ontologies[match(d$Var1, ontologies$ensembl_gene_id),"external_gene_name"]
ggplot(data = d, aes(x=group, y=value, fill=group)) + geom_dotplot(binaxis = "y", stackdir = "center", dotsize = 2.5, alpha = 0.8) +
scale_fill_manual(name = "Conditions", labels = c("Ambient CO2", "Elevated CO2"), values = c('#006666','#D35400')) + facet_wrap(~Name, nrow=3, scales="free") + ggtitle("Genes linked to root growth") +
theme(strip.text.x = element_text(size = 20), plot.title = element_text(size=25, face="bold"),
legend.title = element_text(size = 25, face="bold"), legend.text = element_text(size=24),
axis.text.y = element_text(size = 12, angle = 30), axis.text.x = element_text(size = 0),
axis.title=element_text("",size=17)) + ylab("Normalized counts") + xlab("")
#"AT4G38620",
genesCand <- c("TCP8", "AGL14", "AZF2", "WOX11", "MYB93", "MYB9", "HHO3", "HRS1","WRK")
ontologies[ontologies$external_gene_name %in% genesCand,]
#"AT4G38620",
genesCand <- c("TCP8", "AGL14", "AZF2", "WOX11", "MYB93", "MYB9", "HHO3", "HRS1","WRKY")
ontologies[ontologies$external_gene_name %in% genesCand,]
geneList <- c("AT5G65230", "AT5G16770", "AT1G34670", "AT1G58100",
"AT4G11880",  "AT3G19580", "AT3G03660", "AT1G13300", "AT1G25550", "AT1G62300")
conds = c("cnF", "CnF")
conds = grepl(conds[1], colnames(normalized.count)) | grepl(conds[2], colnames(normalized.count))
df <- normalized.count[geneList, conds]
d<- melt(df, silent=T)
d$group = str_split_fixed(d$Var2, "_", 2)[,1]
d$Name = ontologies[match(d$Var1, ontologies$ensembl_gene_id),"external_gene_name"]
ggplot(data = d, aes(x=group, y=value, fill=group)) + geom_dotplot(binaxis = "y", stackdir = "center", dotsize = 2.5, alpha = 0.8) +
scale_fill_manual(name = "Conditions", labels = c("Ambient CO2", "Elevated CO2"), values = c('#006666','#D35400')) + facet_wrap(~Name, nrow=3, scales="free") + ggtitle("Genes linked to root growth") +
theme(strip.text.x = element_text(size = 20), plot.title = element_text(size=25, face="bold"),
legend.title = element_text(size = 25, face="bold"), legend.text = element_text(size=24),
axis.text.y = element_text(size = 12, angle = 30), axis.text.x = element_text(size = 0),
axis.title=element_text("",size=17)) + ylab("Normalized counts") + xlab("")
ggplot(data = d, aes(x=group, y=value, fill=group)) + geom_dotplot(binaxis = "y", stackdir = "center", dotsize = 2.5, alpha = 0.8) +
scale_fill_manual(name = "Conditions", labels = c("Ambient CO2", "Elevated CO2"), values = c('#006666','#D35400')) +
facet_wrap(~Name, nrow=2, scales="free") + ggtitle("Genes linked to root growth") +
theme(strip.text.x = element_text(size = 20), plot.title = element_text(size=25, face="bold"),
legend.title = element_text(size = 25, face="bold"), legend.text = element_text(size=24),
axis.text.y = element_text(size = 12, angle = 30), axis.text.x = element_text(size = 0),
axis.title=element_text("",size=17)) + ylab("Normalized counts") + xlab("")
ggplot(data = d, aes(x=group, y=value, fill=group)) + geom_dotplot(binaxis = "y", stackdir = "center", dotsize = 2.5, alpha = 0.8) +
scale_fill_manual(name = "Conditions", labels = c("Ambient CO2", "Elevated CO2"), values = c('#006666','#D35400')) +
facet_wrap(~Name, nrow=2, scales="free") + ggtitle("Candidate regulators linked to root growth or nitrate uptake in elevated CO2") +
theme(strip.text.x = element_text(size = 20), plot.title = element_text(size=25, face="bold"),
legend.title = element_text(size = 25, face="bold"), legend.text = element_text(size=24),
axis.text.y = element_text(size = 12, angle = 30), axis.text.x = element_text(size = 0),
axis.title=element_text("",size=17)) + ylab("Normalized counts") + xlab("")
ggplot(data = d, aes(x=group, y=value, fill=group)) + geom_dotplot(binaxis = "y", stackdir = "center", dotsize = 2.5, alpha = 0.8) +
scale_fill_manual(name = "Conditions", labels = c("Ambient CO2", "Elevated CO2"), values = c('#006666','#D35400')) +
facet_wrap(~Name, nrow=2, scales="free") + ggtitle("Candidate regulators linked to root growth or nitrate uptake in elevated CO2") +
theme(strip.text.x = element_text(size = 20), plot.title = element_text(size=25, face="bold"),
legend.title = element_text(size = 25, face="bold"), legend.text = element_text(size=24),
axis.text.y = element_text(size = 18, angle = 30), axis.text.x = element_text(size = 0),
axis.title=element_text("",size=17)) + ylab("Normalized counts") + xlab("")
?golem::browser_button
data.frame(runif(n = 100))
d <- data.frame(runif(n = 100))
d$tooltip <- runif(n = 100)
d
d$y <- rnorm(n=100)
ggplot(data = d, aes(x = x, y = y))+geom_point()
library("ggplot2")
ggplot(data = d, aes(x = x, y = y))+geom_point()
d
d <- data.frame(x = runif(n = 100))
d$tooltip <- runif(n = 100)
d$y <- rnorm(n=100)
d
ggplot(data = d, aes(x = x, y = y))+geom_point()
library(plotly)
ggplotly(g)
g <- ggplot(data = d, aes(x = x, y = y))+geom_point()
ggplotly(g)
g
ggplotly(g)
library(ggplot2)
library(plotly)
d <- data.frame(x = rnorm(n = n), y = rnorm(n), tooltip = runif(n))
n = 27000
d <- data.frame(x = rnorm(n = n), y = rnorm(n), tooltip = runif(n))
ggplot(data = d, aes(x = x, y = y))+geom_point()
g <- ggplot(data = d, aes(x = x, y = y))+geom_point()
library(ggplot2)
library(plotly)
n = 27000
d <- data.frame(x = rnorm(n = n), y = rnorm(n), tooltip = runif(n))
g <- ggplot(data = d, aes(x = x, y = y))+geom_point()
ggplotly(g, tooltip = c("tootlip"))
sessionInfo()
ggplotly(g, tooltip = c("tootlip"))
path = "D:/These/QuantifFiles/CPK_N03.csv"
read.csv(path, sep = '\t')
d <- read.csv(path, sep = '\t')
d$Gene
rownames(d) <- d$Gene
View(d)
d <- read.csv(path, sep = '\t')
rownames(d) <- d$Gene
library(devtools)
install_github("nik01010/dashboardthemes")
library(devtools)
install_github("nik01010/dashboardthemes")
remove.packages("rlang")
install.packages(rlang)
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
library(rlang)
# etude des correlations nb cibles et correlation de paires de TFs
load("D:/These/NetworkInference/corrTFsCommonTargets.RData")
top$commonRatio <- top$CommonTargetsNumber/apply(top[,c("tf1_target_Number", "tf2_target_Number")], 1, min)
ggplot(data = top, aes(y = commonRatio, x = abs.cors.)) + geom_hex()
library(ggplot)
ggplot(data = top, aes(y = commonRatio, x = abs.cors.)) + geom_hex()
library(ggplot2)
ggplot(data = top, aes(y = commonRatio, x = abs.cors.)) + geom_hex()
View(top)
source("Funtions/Network_functions.R")
setwd("D:/These/NetworkInference")
source("Funtions/Network_functions.R")
View(top)
load("D:/These/NetworkShiny/NetworkData/CO2DEGenes_faibleNitrate_CO2-N.RData")
getTargets(tf = "AT5G13080", data)
getTargets <- function(tf, data){
targets <- data$edges[data$edges$from==tf,"to"]
names <- data$nodes[data$nodes$id %in% targets, "label"]
return(paste(names, collapse = ', '))
}
getTargets(tf = "AT5G13080", data)
getTargetsAgi <- function(tf, data){
targets <- data$edges[data$edges$from==tf,"to"]
names <- data$nodes[data$nodes$id %in% targets, "id"]
return(names)
}
getTargets(tf = "AT5G13080", data)
getTargetsAgi <- function(tf, data){
targets <- data$edges[data$edges$from==tf,"to"]
names <- data$nodes[data$nodes$id %in% targets, "id"]
return(names)
}
getTargetsAgi(tf = "AT5G13080", data)
targets <- union(getTargetsAgi(tf = "AT5G13080", data), getTargetsAgi(tf = "AT5G13080", data))
targets <- union(getTargetsAgi(tf = "AT5G13080", data), getTargetsAgi(tf = "AT3G15500", data))
genie <- function(normalized.count, regressors=NA, targets=NA, nTrees=1000, nCores=5, top = 0.05, fixedLinkNumber = NA,
returnLinks = F){
mat <- GENIE3(normalized.count, regulators = intersect(rownames(normalized.count),regressors), targets = targets, treeMethod = "RF", K = "sqrt", nTrees = nTrees, nCores = nCores,verbose = T)
#hist(mat)
links <- getLinkList(mat)
if(returnLinks){return(links)}
if(is.na(fixedLinkNumber)) links <- links[1:round(dim(links)[1]*top,0),]
else links <- links[1:fixedLinkNumber,]
print(paste0("Number of links : ", dim(links)[1]))
g <- graph.data.frame(links, directed = F)
return(g)
}
setwd("D:/These/NetworkInference")
load("./Data/DEGsListsFiltered.RData")
load("./Data/DEGsListsFiltered.RData")
load("Data/PlnTFBDRegulatorsList.RData")
load("Data/PlnTFBDRegulatorsList.RData")
load("./Data/normalized.count_At.RData")
load("./Data/DEGsListsFiltered.RData")
load("Data/PlnTFBDRegulatorsList.RData")
load("./Data/normalized.count_At.RData")
load("Data/OntologyAllGenes.RData")
genes <- DEGs[["cnF CnF"]]
rownames(ontologies) <- ontologies$ensembl_gene_id
removeNitrateStarv = F; removeIronStarv = T
if (removeIronStarv) normalized.count <- normalized.count[,grepl("F", colnames(normalized.count))]
if (removeNitrateStarv) normalized.count <- normalized.count[,grepl("N", colnames(normalized.count))]
View(normalized.count)
genie <- function(normalized.count, regressors=NA, targets=NA, nTrees=1000, nCores=5, top = 0.05, fixedLinkNumber = NA,
returnLinks = F){
mat <- GENIE3(normalized.count, regulators = intersect(rownames(normalized.count),regressors), targets = targets, treeMethod = "RF", K = "sqrt", nTrees = nTrees, nCores = nCores,verbose = T)
#hist(mat)
links <- getLinkList(mat)
if(returnLinks){return(links)}
if(is.na(fixedLinkNumber)) links <- links[1:round(dim(links)[1]*top,0),]
else links <- links[1:fixedLinkNumber,]
print(paste0("Number of links : ", dim(links)[1]))
g <- graph.data.frame(links, directed = F)
return(g)
}
View(top)
View(top)
View(TF)
View(top)
v = c("a", "b", "c")
v[-"a"]
net <- genie(normalized.count, regressors = regressors, targets = genes, fixedLinkNumber=3000)
regressors = intersect(genes, TF$AGI)
# sans WRKY
regressors = regressors[regressors != "AT5G13080"]
net <- genie(normalized.count, regressors = regressors, targets = genes, fixedLinkNumber=3000)
data_sansWRKY <- toVisNetworkData(net)
networkToData <- function(net, ontologies, TF){
data <- toVisNetworkData(net)
data$nodes$Ontology <- ontologies[match(data$nodes$id, ontologies$ensembl_gene_id), "external_gene_name"]
data$nodes$description <- ontologies[match(data$nodes$id, ontologies$ensembl_gene_id), "description"]
data$nodes$group <- ifelse(data$nodes$id %in% TF$AGI, "Regulator", "Target Gene")
data$nodes$label <- data$nodes$Ontology
data$edges$color <- '#333366'
data$edges$value <- data$edges$weight
data$edges$Regulator_Name <-
ontologies[match(data$edges$from, ontologies$ensembl_gene_id), ]$external_gene_name
data$nodes$description <-
ifelse(
grepl("\\[", data$nodes$description),
str_split_fixed(data$nodes$description, "\\[", 2)[, 1],
data$nodes$description
)
data$edges$Target_Name <-
ontologies[match(data$edges$to, ontologies$ensembl_gene_id), ]$external_gene_name
return(data)
}
data_sans_WRKY <- networkToData(net)
######### en mettant WRKY75
library(visNetwork)
data_sans_WRKY <- networkToData(net)
data_sans_WRKY <- networkToData(net, ontologies, TF)
library(stringr)
data_sans_WRKY <- networkToData(net, ontologies, TF)
View(data_sans_WRKY)
regressors = intersect(genes, TF$AGI)
# sans WRKY
regressors = regressors[regressors != "AT3G15500"]
net <- genie(normalized.count, regressors = regressors, targets = genes, fixedLinkNumber=3000)
# net was generated in genie3.rmd sale je sais
data_sans_NAC55 <- networkToData(net, ontologies, TF)
targets_WRKY <- getTargetsAgi(tf = "AT5G13080", data)
targets_NAC <- getTargetsAgi(tf = "AT3G15500", data)
common <- intersect(targets_WRKY, targets_NAC)
View(top)
targets_WRKY <- getTargetsAgi(tf = "AT5G13080", data_sans_WRKY)
targets_WRKY <- getTargetsAgi(tf = "AT5G13080", data)
getTargetsAgi(tf = "AT5G13080", data_sans_WRKY)
targets_NAC_alone <- getTargetsAgi(tf = "AT3G15500", data_sans_WRKY)
# NAC passe de 36 à 43 cibles. Voyons le recoupement avec celles de WRK dans le reseau classique :
intersect(targets_NAC_alone, targets_WRKY)
# NAC passe de 36 à 43 cibles. Voyons le recoupement avec celles de WRK dans le reseau classique :
length(intersect(targets_NAC_alone, targets_WRKY))
common_sans_WRKY <- intersect(targets_NAC_alone, targets_WRKY)
notèstolen_by_NAC <- targets_WRKY[!targets_WRKY %in% common_sans_WRKY]
not_stolen_by_NAC <- targets_WRKY[!targets_WRKY %in% common_sans_WRKY]
getRegulators <- function(gene, data){
regs <- data$edges[data$edges$to==gene,"from"]
names <- data$nodes[data$nodes$id %in% regs, "label"]
return(paste(names, collapse = ', '))
}
sapply(not_stolen_by_NAC, getRegulators, data_sans_WRKY)
getRegulators(not_stolen_by_NAC, data_sans_WRKY)
getRegulators_agi <- function(genes, data){
regs <- data$edges[data$edges$to %in% gene,"from"]
names <- data$nodes[data$nodes$id %in% regs, "id"]
return(unique(names))
}
getRegulators_agi(not_stolen_by_NAC, data_sans_WRKY)
getRegulators_agi <- function(genes, data){
regs <- data$edges[data$edges$to %in% genes,"from"]
names <- data$nodes[data$nodes$id %in% regs, "id"]
return(unique(names))
}
getRegulators_agi(not_stolen_by_NAC, data_sans_WRKY)
View(normalized.count)
getCor <- function(tf){
return(cor(normalized.count[tf,], normalized.count["AT5G13080",], method = "spearman"))
}
sapply(getRegulators_agi(not_stolen_by_NAC, data_sans_WRKY), getCor)
getCor <- function(tf){
return(abs(cor(normalized.count[tf,], normalized.count["AT5G13080",], method = "spearman")))
}
sapply(getRegulators_agi(not_stolen_by_NAC, data_sans_WRKY), getCor)
cors <- sapply(getRegulators_agi(not_stolen_by_NAC, data_sans_WRKY), getCor)
boxplot(cors)
violinplot(cors)
hist(cors)
hist(cors, bins = 20)
hist(cors, breaks = 20)
summary(cors)
targets_WRKY_alone <- getTargetsAgi(tf = "AT5G13080", data_sans_NAC)
targets_WRKY_alone <- getTargetsAgi(tf = "AT5G13080", data_sans_NAC55)
length(intersect(targets_WRKY_alone, targets_WRKY))
length(intersect(targets_WRKY_alone, targets_NAC))
common_sans_NAC <- intersect(targets_WRKY_alone, targets_NAC)
common_sans_NAC <- intersect(targets_WRKY_alone, targets_NAC)
not_stolen_by_WRKY <- targets_NAC[!targets_NAC %in% common_sans_NAC]
getRegulators_agi(not_stolen_by_WRKY, data_sans_NAC55)
cors <- sapply(getRegulators_agi(not_stolen_by_NAC, data_sans_WRKY), getCor)
hist(cors, breaks = 20)
cors <- sapply(getRegulators_agi(not_stolen_by_WRKY, data_sans_NAC55), getCor)
hist(cors, breaks = 20)
summary(cors)
