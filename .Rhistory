glmDataTest <- glmData
glmDataTest$nitrate <- sample(glmDataTest$nitrate, replace = F)
glmTest <- glm(Counts ~ 1 + as.factor(Co2) * as.factor(nitrate) * as.factor(fer), family = poisson(link="log"), data = glmDataTest)
summary(glmTest)
load("./normalized.count_At.RData")
load("./GenesCO2_At.RData")
load("./DEgenesAllAt.RData")
load("GenesCO2_clustered_coseq_At.RData")
DEgenes <- sharedBy3
glmData <- melt(round(normalized.count[DEgenes,], 0))
colnames(glmData) <- c("gene", "Condition", "Counts")
groups <- str_split_fixed(glmData$Condition, "_", 2)[,1]
glmData$Co2 <- str_split_fixed(groups, "", 3)[,1]
glmData$nitrate <- str_split_fixed(groups, "", 3)[,2]
glmData$fer <- str_split_fixed(groups, "", 3)[,3]
glmData$Co2 <- ifelse(glmData$Co2 == "c", 0, 1)
glmData$nitrate <- ifelse(glmData$nitrate == "N", 0, 1)
glmData$fer <- ifelse(glmData$fer == "F", 0, 1)
glmData <- glmData[c("Counts", "Co2", "nitrate", "fer", "gene")]
head(glmData)
ggplot(data = glmData, aes(x=interaction(Co2, nitrate, fer), y = log(Counts), color = interaction(Co2, nitrate, fer))) + geom_boxplot(alpha = 0.4)
print(dim(glmData))
glm <- glm(Counts ~ 1 + as.factor(Co2) * as.factor(nitrate) * as.factor(fer), family = poisson(link="log"), data = glmData)
summary(glm)
load("./normalized.count_At.RData")
load("./GenesCO2_At.RData")
load("./DEgenesAllAt.RData")
load("GenesCO2_clustered_coseq_At.RData")
DEgenes <- sharedBy3
glmData <- melt(round(normalized.count[DEgenes,], 0))
colnames(glmData) <- c("gene", "Condition", "Counts")
glmData <- glmData[!duplicated(glmData$gene),]
groups <- str_split_fixed(glmData$Condition, "_", 2)[,1]
glmData$Co2 <- str_split_fixed(groups, "", 3)[,1]
glmData$nitrate <- str_split_fixed(groups, "", 3)[,2]
glmData$fer <- str_split_fixed(groups, "", 3)[,3]
glmData$Co2 <- ifelse(glmData$Co2 == "c", 0, 1)
glmData$nitrate <- ifelse(glmData$nitrate == "N", 0, 1)
glmData$fer <- ifelse(glmData$fer == "F", 0, 1)
glmData <- glmData[c("Counts", "Co2", "nitrate", "fer", "gene")]
head(glmData)
ggplot(data = glmData, aes(x=interaction(Co2, nitrate, fer), y = log(Counts), color = interaction(Co2, nitrate, fer))) + geom_boxplot(alpha = 0.4)
print(dim(glmData))
glm <- glm(Counts ~ 1 + as.factor(Co2) * as.factor(nitrate) * as.factor(fer), family = poisson(link="log"), data = glmData)
View(glmData)
glmData <- glmData[sample(rownames(glmData)),]
load("./normalized.count_At.RData")
load("./GenesCO2_At.RData")
load("./DEgenesAllAt.RData")
load("GenesCO2_clustered_coseq_At.RData")
DEgenes <- sharedBy3
glmData <- melt(round(normalized.count[DEgenes,], 0))
colnames(glmData) <- c("gene", "Condition", "Counts")
glmData <- glmData[sample(rownames(glmData)),]
glmData <- glmData[!duplicated(glmData$gene),]
groups <- str_split_fixed(glmData$Condition, "_", 2)[,1]
glmData$Co2 <- str_split_fixed(groups, "", 3)[,1]
glmData$nitrate <- str_split_fixed(groups, "", 3)[,2]
glmData$fer <- str_split_fixed(groups, "", 3)[,3]
glmData$Co2 <- ifelse(glmData$Co2 == "c", 0, 1)
glmData$nitrate <- ifelse(glmData$nitrate == "N", 0, 1)
glmData$fer <- ifelse(glmData$fer == "F", 0, 1)
glmData <- glmData[c("Counts", "Co2", "nitrate", "fer", "gene")]
head(glmData)
ggplot(data = glmData, aes(x=interaction(Co2, nitrate, fer), y = log(Counts), color = interaction(Co2, nitrate, fer))) + geom_boxplot(alpha = 0.4)
print(dim(glmData))
glm <- glm(Counts ~ 1 + as.factor(Co2) * as.factor(nitrate) * as.factor(fer), family = poisson(link="log"), data = glmData)
summary(glm)
ggplot(data = glmData, aes(x=interaction(Co2, nitrate, fer), y = log(Counts), color = interaction(Co2, nitrate, fer))) + geom_boxplot(alpha = 0.4)
install.packages("lme4")
require(lme4)
View(glmData)
load("./normalized.count_At.RData")
load("./GenesCO2_At.RData")
load("./DEgenesAllAt.RData")
load("GenesCO2_clustered_coseq_At.RData")
DEgenes <- sharedBy3
glmData <- melt(round(normalized.count[DEgenes,], 0))
colnames(glmData) <- c("gene", "Condition", "Counts")
glmData <- glmData[sample(rownames(glmData)),]
glmData <- glmData[!duplicated(glmData$gene),]
groups <- str_split_fixed(glmData$Condition, "_", 2)[,1]
glmData$Co2 <- str_split_fixed(groups, "", 3)[,1]
glmData$nitrate <- str_split_fixed(groups, "", 3)[,2]
glmData$fer <- str_split_fixed(groups, "", 3)[,3]
glmData$Co2 <- ifelse(glmData$Co2 == "c", 0, 1)
glmData$nitrate <- ifelse(glmData$nitrate == "N", 0, 1)
glmData$fer <- ifelse(glmData$fer == "F", 0, 1)
glmData <- glmData[c("Counts", "Co2", "nitrate", "fer", "gene")]
head(glmData)
ggplot(data = glmData, aes(x=interaction(Co2, nitrate, fer), y = log(Counts), color = interaction(Co2, nitrate, fer))) + geom_boxplot(alpha = 0.4)
print(dim(glmData))
glm <- glm(Counts ~ 1 + as.factor(Co2) * as.factor(nitrate) * as.factor(fer), family = poisson(link="log"), data = glmData)
summary(glm)
mixGlm <- glmer(Counts ~  as.factor(Co2) * as.factor(nitrate) * as.factor(fer)
(1 | gene), data = glmData, family = possion(link="log"), control = glmerControl(optimizer = "bobyqa"),
nAGQ = 10)
mixGlm
mixGlm <- glmer(Counts ~  as.factor(Co2) * as.factor(nitrate) * as.factor(fer)
(1 | gene), data = glmData, family = poisson(link="log"), control = glmerControl(optimizer = "bobyqa"),
nAGQ = 10)
glmer(Counts ~  as.factor(Co2) * as.factor(nitrate) * as.factor(fer)
(1 | gene), data = glmData, family = poisson(link="log"), control = glmerControl(optimizer = "bobyqa"),
nAGQ = 10)
mixGlm <- glmer(Counts ~  as.factor(Co2) * as.factor(nitrate) * as.factor(fer) + (1 | gene), data = glmData, family = poisson(link="log"))
print(mixGlm)
print(mixGlm, corr = F)
library(lmerTest)
install.packages("lmerTest")
(lmerTest)
install.packages("lmerTest")
library(lmerTest)
lmm <- lmer(Counts ~  as.factor(Co2) * as.factor(nitrate) * as.factor(fer) + (1 | gene), data = glmData, family = poisson(link="log"))
lmer(mixGlm)
lmer(mixGlm, data = glmData)
print(mixGlm, corr = F)
lmm <- lmerTest::lmer(Counts ~  as.factor(Co2) * as.factor(nitrate) * as.factor(fer) + (1 | gene), data = glmData, family = poisson(link="log"))
summary(mixGlm)
load("./normalized.count_At.RData")
load("./GenesCO2_At.RData")
load("./DEgenesAllAt.RData")
load("GenesCO2_clustered_coseq_At.RData")
DEgenes <- sharedBy3
glmData <- melt(round(normalized.count[DEgenes,], 0))
colnames(glmData) <- c("gene", "Condition", "Counts")
glmData <- glmData[sample(rownames(glmData)),]
#glmData <- glmData[!duplicated(glmData$gene),]
groups <- str_split_fixed(glmData$Condition, "_", 2)[,1]
glmData$Co2 <- str_split_fixed(groups, "", 3)[,1]
glmData$nitrate <- str_split_fixed(groups, "", 3)[,2]
glmData$fer <- str_split_fixed(groups, "", 3)[,3]
glmData$Co2 <- ifelse(glmData$Co2 == "c", 0, 1)
glmData$nitrate <- ifelse(glmData$nitrate == "N", 0, 1)
glmData$fer <- ifelse(glmData$fer == "F", 0, 1)
glmData <- glmData[c("Counts", "Co2", "nitrate", "fer", "gene")]
head(glmData)
ggplot(data = glmData, aes(x=interaction(Co2, nitrate, fer), y = log(Counts), color = interaction(Co2, nitrate, fer))) + geom_boxplot(alpha = 0.4)
print(dim(glmData))
glm <- glm(Counts ~ 1 + as.factor(Co2) * as.factor(nitrate) * as.factor(fer), family = poisson(link="log"), data = glmData)
summary(glm)
mixGlm <- glmer(Counts ~  as.factor(Co2) * as.factor(nitrate) * as.factor(fer) + (1 | gene), data = glmData, family = poisson(link="log"))
summary(mixGlm)
load("./normalized.count_At.RData")
load("./DEgenesAllAt.RData")
glmData <- melt(round(normalized.count[DEgenes,], 0))
colnames(glmData) <- c("gene", "Condition", "Counts")
groups <- str_split_fixed(glmData$Condition, "_", 2)[,1]
glmData$Co2 <- str_split_fixed(groups, "", 3)[,1]
glmData$nitrate <- str_split_fixed(groups, "", 3)[,2]
glmData$fer <- str_split_fixed(groups, "", 3)[,3]
glmData$Co2 <- ifelse(glmData$Co2 == "c", 0, 1)
glmData$nitrate <- ifelse(glmData$nitrate == "N", 0, 1)
glmData$fer <- ifelse(glmData$fer == "F", 0, 1)
glmData <- glmData[c("Counts", "Co2", "nitrate", "fer", "gene")]
head(glmData)
ggplot(data = glmData, aes(x=interaction(Co2, nitrate, fer), y = log(Counts), color = interaction(Co2, nitrate, fer))) + geom_boxplot(alpha = 0.4)
print(dim(glmData))
glm <- glm(Counts ~ 1 + as.factor(Co2) * as.factor(nitrate) * as.factor(fer), family = poisson(link="log"), data = glmData)
summary(glm)
mixGlm <- glmer(Counts ~  as.factor(Co2) * as.factor(nitrate) * as.factor(fer) + (1 | gene), data = glmData, family = poisson(link="log"))
summary(mixGlm)
shiny::runApp('D:/These/NetworkShiny')
runApp('D:/These/NetworkShiny')
runApp('D:/These/NetworkShiny')
runApp('D:/These/NetworkShiny')
install.packages("shinydashboard")
library(shinydashboard)
runApp('D:/These/NetworkShiny')
runApp('D:/These/NetworkShiny')
runApp('D:/These/NetworkShiny')
runApp('D:/These/NetworkShiny')
runApp('D:/These/NetworkShiny')
runApp('D:/These/NetworkShiny')
runApp('D:/These/NetworkShiny')
shiny::runApp('D:/These/NetworkShiny')
clustering <- function(DEgenes, data, nb_clusters = 2:12){
conds = colnames(data)
groups <- str_split_fixed(conds, '_', 2)[,1]
dataC <- data[DEgenes,conds]
run_pois <- coseq(dataC, conds=groups, K=nb_clusters, model="Poisson", iter = 5, transformation = "none")
print(coseq::plot(run_pois, conds = groups, collapse_reps="average", graphs = c("ICL", "boxplots", "profiles", "probapost_barplots")))
print(summary(run_pois))
clusters_per_genes <- coseq::clusters(run_pois)
return(list(clusters_per_genes, run_pois))
}
library(knitr, warn.conflicts = F, quietly = T)
library(rmdformats, warn.conflicts = F, quietly = T)
#setwd("~/Documents/CombinatoireFeNCO2/Analyses")
setwd("D:/These/CO2NutritionAnalysis/")
## Global options
options(max.print="75")
opts_chunk$set(cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
fig.align = "center")
opts_knit$set(width=75)
suppressMessages(library(gridExtra, warn.conflicts = F, quietly = T))
suppressMessages(library(stringr, warn.conflicts = F, quietly = T))
suppressMessages(library(ggplot2, warn.conflicts = F, quietly = T))
suppressMessages(library(ggpubr, warn.conflicts = F, quietly = T))
#self written functions for differential expression
source("./Imports/ToolFunctions.R")
source("./Imports/VisuFunctions.R")
#PATH_TO_DEG <- "~/Documents/CombinatoireFeNCO2/DEG_CombinatoireCO2_Fe_N/Arabidopsis/"
PATH_TO_DEG <- "D:/These/Thesis/DEG_CombinatoireCO2_Fe_N/Arabidopsis"
geneList <- function(comp, filter=T){
filename = paste0(path,translateToOSX(comp), ".txt")
At <- read.csv(filename, h=T, sep = "\t")
if(filter){At <- At[At$MeanNormalizedExpression > 30,]}
return(At$ensembl)
}
geneList(c("cNF", "CNF"))
geneList <- function(comp, filter=T){
filename = paste0(path,translateToOSX(comp), ".txt")
At <- read.csv(filename, h=T, sep = "\t")
if(filter){At <- At[At$MeanNormalizedExpression > 30,]}
return(At$ensembl)
}
geneList(c("cNF", "CNF"))
path <- paste0(PATH_TO_DEG, "/FactorCO2/")
geneList(c("cNF", "CNF"))
geneList <- function(comp, filter=T){
filename = paste0(path,translateToOSX(comp), ".txt")
At <- read.csv(filename, h=T, sep = "\t")
if(filter){At <- At[At$MeanNormalizedExpression > 30,]}
return(At$ensembl_gene_id)
}
geneList(c("cNF", "CNF"))
geneList <- function(comp, filter=T){
filename = paste0(path,translateToOSX(comp), ".txt")
At <- read.csv(filename, h=T, sep = "\t")
if(filter){At <- At[At$MeanNormalizedExpression > 30,]}
return(as.vector(At$ensembl_gene_id))
}
geneList(c("cNF", "CNF"))
geneList(c("cnF", "CnF"))
geneList(c("cNf", "CNf"))
geneList(c("cnf", "Cnf"))
DEGs <- list()
path <- paste0(PATH_TO_DEG, "/FactorCO2/")
DEGs[[c("cNF", "CNF")]] <- geneList(c("cNF", "CNF"))
DEGs[[paste("cNF", "CNF")]] <- geneList(c("cNF", "CNF"))
View(DEGs)
DEGs <- list()
path <- paste0(PATH_TO_DEG, "/FactorCO2/")
DEGs[[paste("cNF", "CNF")]] <- geneList(c("cNF", "CNF"))
DEGs[[paste("cnF", "CnF")]] <- geneList(c("cnF", "CnF"))
DEGs[[paste("cNf", "CNf")]] <- geneList(c("cNf", "CNf"))
DEGs[[paste("cnf", "Cnf")]] <- geneList(c("cnf", "Cnf"))
path <- paste0(PATH_TO_DEG, "/FactorNitrate/")
DEGs[[paste("cNF", "cnF")]] <- geneList(c("cNF", "cnF"))
DEGs[[paste("CNF", "CnF")]] <- geneList(c("CNF", "CnF"))
DEGs[[paste("cNf", "cnf")]] <- geneList(c("cNf", "cnf"))
DEGs[[paste("CNf", "Cnf")]] <- geneList(c("CNf", "Cnf"))
path <- paste0(PATH_TO_DEG, "/FactorIron/")
DEGs[[paste("cNF", "cNf")]] <- geneList(c("cNF", "cNf"))
DEGs[[paste("cnF", "cnf")]] <- geneList(c("cnF", "cnf"))
DEGs[[paste("CNF", "CNf")]] <- geneList(c("CNF", "CNf"))
DEGs[[paste("CnF", "Cnf")]] <- geneList(c("CnF", "Cnf"))
View(DEGs)
save(DEGs, file = "./Data/DEGsFilterLists.RData")
geneList <- function(comp, filter=F){
filename = paste0(path,translateToOSX(comp), ".txt")
At <- read.csv(filename, h=T, sep = "\t")
if(filter){At <- At[At$MeanNormalizedExpression > 30,]}
return(as.vector(At$ensembl_gene_id))
}
DEGs <- list()
path <- paste0(PATH_TO_DEG, "/FactorCO2/")
DEGs[[paste("cNF", "CNF")]] <- geneList(c("cNF", "CNF"))
DEGs[[paste("cnF", "CnF")]] <- geneList(c("cnF", "CnF"))
DEGs[[paste("cNf", "CNf")]] <- geneList(c("cNf", "CNf"))
DEGs[[paste("cnf", "Cnf")]] <- geneList(c("cnf", "Cnf"))
path <- paste0(PATH_TO_DEG, "/FactorNitrate/")
DEGs[[paste("cNF", "cnF")]] <- geneList(c("cNF", "cnF"))
DEGs[[paste("CNF", "CnF")]] <- geneList(c("CNF", "CnF"))
DEGs[[paste("cNf", "cnf")]] <- geneList(c("cNf", "cnf"))
DEGs[[paste("CNf", "Cnf")]] <- geneList(c("CNf", "Cnf"))
path <- paste0(PATH_TO_DEG, "/FactorIron/")
DEGs[[paste("cNF", "cNf")]] <- geneList(c("cNF", "cNf"))
DEGs[[paste("cnF", "cnf")]] <- geneList(c("cnF", "cnf"))
DEGs[[paste("CNF", "CNf")]] <- geneList(c("CNF", "CNf"))
DEGs[[paste("CnF", "Cnf")]] <- geneList(c("CnF", "Cnf"))
save(DEGs, file = "./Data/DEGsLists.RData")
genes <- unlist(DEGs)
genes <- unique(unlist(DEGs))
load("./Data/normalized.count_At.RData")
cluster <- clustering(genes, normalized.count, nb_clusters = 5:20)
round(normalized.count, 0)
cluster <- clustering(genes, round(normalized.count, 0), nb_clusters = 5:20)
cluster <- clustering(genes, round(normalized.count, 0), nb_clusters = 14:15)
heatmap(normalized.count[sample(genes, size = 700),])
heatmap(normalized.count[sample(genes, size = 700),grep("cNF", colnames(normalized.count))])
heatmap(normalized.count[sample(genes, size = 700),grep("cNF", colnames(normalized.count))])
heatmap(normalized.count[sample(genes, size = 700),grep("cNF", colnames(normalized.count))])
heatmap(normalized.count[sample(genes, size = 700),grep("cNF", colnames(normalized.count))])
heatmap(normalized.count[sample(genes, size = 700),grep("cNF", colnames(normalized.count))])
heatmap(normalized.count[sample(genes, size = 700),grep("cNF", colnames(normalized.count))])
heatmap(normalized.count[sample(genes, size = 700),grep("cNF", colnames(normalized.count))])
heatmap(normalized.count[sample(genes, size = 700),grep("cNF", colnames(normalized.count))])
heatmap(normalized.count[sample(genes, size = 700),grep("cNF", colnames(normalized.count))])
heatmap(normalized.count[sample(genes, size = 700),!grepl("cNF_1", colnames(normalized.count))])
heatmap(normalized.count[sample(genes, size = 700),!grepl("cNF_1", colnames(normalized.count))])
genes <- unique(unlist(DEGs))
heatmap(normalized.count[sample(genes, size = 700),!grepl("cNF_1", colnames(normalized.count))])
cluster <- clustering(genes, round(normalized.count[,!grepl("cNF_1", colnames(normalized.count))], 0), nb_clusters = 8:14)
cluster <- clustering(genes, round(normalized.count, 0), nb_clusters = 8:14)
idsList <- cluster[[1]]
idsList
list <- names(idsList)
names(list) <- as.vector(idsList)
list
list(list)
as.list(list)
idsList
load("./Data/AGIToEntrez.RDAta")
View(AGIToEntrez)
entrez <- list()
idsList <- cluster[[1]]
for(k in 1:max(names(idsList))){
genesList <- names(idsList[idsList==k])
entrez[[k]] <- AGIToEntrez[match(genesList, AGIToEntrez$ensembl_gene_id),]$entrezgene_id
}
entrez <- list()
idsList <- cluster[[1]]
for(k in 1:max(idsList)){
genesList <- names(idsList[idsList==k])
entrez[[k]] <- AGIToEntrez[match(genesList, AGIToEntrez$ensembl_gene_id),]$entrezgene_id
}
entrez
entrez <- list()
idsList <- cluster[[1]]
for(k in 1:max(idsList)){
genesList <- names(idsList[idsList==k])
entrez[[k]] <- na.omit(AGIToEntrez[match(genesList, AGIToEntrez$ensembl_gene_id),]$entrezgene_id)
}
list <- names(idsList)
compareOnt <- function(idsList, universe, simCutoff = 0.8){
ckreg <- compareCluster(geneCluster = idsList, fun = "enrichGO", OrgDb = org.At.tair.db, ont = "BP", pAdjustMethod = "BH",
pvalueCutoff = 0.01, qvalueCutoff = 0.05, universe = universe)
ckreg@compareClusterResult
simCk <- clusterProfiler::simplify(ckreg, cutoff=simCutoff, by="p.adjust", select_fun=min)
resCk <- simCk@compareClusterResult
print(dotplot(simCk, x = ~Cluster, showCategory = 15, font.size = 10))
return(resCk)
}
suppressMessages(library(org.At.tair.db, warn.conflicts = F, quietly = T))
suppressMessages(library(enrichplot, warn.conflicts = F, quietly = T))
suppressMessages(library(clusterProfiler, warn.conflicts = F, quietly = T))
res <- compareOnt(entrez, universe = as.character(AGIToEntrez$entrezgene_id))
res <- compareOnt(entrez, universe = as.character(AGIToEntrez$entrezgene_id))
compareOnt <- function(idsList, universe, simCutoff = 0.8){
ckreg <- compareCluster(geneCluster = idsList, fun = "enrichGO", OrgDb = org.At.tair.db, ont = "BP", pAdjustMethod = "BH",
pvalueCutoff = 0.01, qvalueCutoff = 0.05, universe = universe)
ckreg@compareClusterResult
simCk <- clusterProfiler::simplify(ckreg, cutoff=simCutoff, by="p.adjust", select_fun=min)
resCk <- simCk@compareClusterResult
print(dotplot(simCk, x = ~Cluster, showCategory = 25, font.size = 10))
return(resCk)
}
entrez
entrez <- list()
idsList <- cluster[[1]]
for(k in 1:max(idsList)){
genesList <- names(idsList[idsList==k])
entrez[[k]] <- as.vector(na.omit(AGIToEntrez[match(genesList, AGIToEntrez$ensembl_gene_id),]$entrezgene_id))
}
entrez
res <- compareOnt(entrez, universe = as.character(AGIToEntrez$entrezgene_id))
as.character(AGIToEntrez$entrezgene_id)
res <- compareOnt(entrez, universe = na.omit(as.character(AGIToEntrez$entrezgene_id)))
entrez <- list()
idsList <- cluster[[1]]
for(k in 1:max(idsList)){
genesList <- names(idsList[idsList==k])
entrez[[as.character(k)]] <- as.vector(na.omit(AGIToEntrez[match(genesList, AGIToEntrez$ensembl_gene_id),]$entrezgene_id))
}
res <- compareOnt(entrez, universe = na.omit(as.character(AGIToEntrez$entrezgene_id)))
DEGs[[FactorCO2]]
FactorCO2 <- c(paste("cNF", "CNF"), paste("cnF", "CnF"),paste("cNf", "CNf"), paste("cnf", "Cnf"))
FactorNitrate <- c(paste("cNF", "cnF"), paste("CNF", "CnF"),paste("cNf", "cnf"), paste("CNf", "Cnf"))
FactorIron <- c(paste("cNF", "cnF"), paste("CNF", "CnF"),paste("cNf", "cnf"), paste("CNf", "Cnf"))
DEGs[[FactorCO2]]
FactorCO2
#heatmap(normalized.count[sample(genes, size = 700),!grepl("cNF_1", colnames(normalized.count))])
DEGs$FactorCO2
DEGs[FactorCO2]
read_csv("D:\These\Thesis\DEG_CombinatoireCO2_Fe_N\ArabidopsisFiltered\FactorIron", h=T)
read_csv("D:\These\Thesis\DEG_CombinatoireCO2_Fe_N\ArabidopsisFiltered\FactorIron")
read_csv("D:/These/Thesis/DEG_CombinatoireCO2_Fe_N\ArabidopsisFiltered/FactorIron")
read_csv("D:/These/Thesis/DEG_CombinatoireCO2_Fe_N/ArabidopsisFiltered/FactorIron")
read.table("D:/These/Thesis/DEG_CombinatoireCO2_Fe_N/ArabidopsisFiltered/FactorIron")
read.csv("D:/These/Thesis/DEG_CombinatoireCO2_Fe_N/ArabidopsisFiltered/FactorIron")
read_csv("D:/These/Thesis/DEG_CombinatoireCO2_Fe_N/ArabidopsisFiltered/FactorIron")
library(readr)
library("readr")
install.packages("readr")
read_csv("D:/These/Thesis/DEG_CombinatoireCO2_Fe_N/ArabidopsisFiltered/FactorIron")
library("readr")
read_csv("D:/These/Thesis/DEG_CombinatoireCO2_Fe_N/ArabidopsisFiltered/FactorIron")
a <- read_csv("D:/These/Thesis/DEG_CombinatoireCO2_Fe_N/ArabidopsisFiltered/FactorIron")
View(a)
a <- read_csv("D:/These/Thesis/DEG_CombinatoireCO2_Fe_N/ArabidopsisFiltered/FactorIron/AmbientCO2_HightNitrate_Fe-AmbientCO2_HightNitrate_FeStarvation.txt")
read.csv("D:/These/Thesis/DEG_CombinatoireCO2_Fe_N/ArabidopsisFiltered/FactorIron/AmbientCO2_HightNitrate_Fe-AmbientCO2_HightNitrate_FeStarvation.txt")
install.packages("HTSCluster")
HTSClusterUsersGuide()
library(HTSCluster)
HTSClusterUsersGuide()
install.packages("coronavirus")
library(coronavirus)
data(coronavirus)
force(coronavirus)
tail(coronavirus)
summary(coronavirus)
devtools::install_github("RamiKrispin/coronavirus")
remove.packages(coronavirus)
devtools::install_github("RamiKrispin/coronavirus")
.libPaths()
devtools::install_github("RamiKrispin/coronavirus")
remove.packages("glue")
remove.packages("coronavirus")
devtools::install_github("RamiKrispin/coronavirus")
install.packages("glue")
devtools::install_github("RamiKrispin/coronavirus")
install.packages("remotes")
devtools::install_github("RamiKrispin/coronavirus")
install_github("anjalisilva/MPLNClust", build_vignettes = TRUE)
require("devtools")
install_github("anjalisilva/MPLNClust", build_vignettes = TRUE)
require("devtools")
install.packages("Rcpp")
require("devtools")
install_github("anjalisilva/MPLNClust", build_vignettes = TRUE)
require("devtools")
install_github("anjalisilva/MPLNClust", build_vignettes = TRUE)
require("devtools")
install.packages("digest")
require("devtools")
install_github("anjalisilva/MPLNClust", build_vignettes = TRUE)
require("devtools")
install.packages(processx)
install.packages("processx")
require("devtools")
install_github("anjalisilva/MPLNClust", build_vignettes = TRUE)
install_github("anjalisilva/MPLNClust", build_vignettes = TRUE)
library(utils)
library(httr)
#download the dataset from the ECDC website to a local temporary file
GET("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv", authenticate(":", ":", type="ntlm"), write_disk(tf <- tempfile(fileext = ".csv")))
#read the Dataset sheet into “R”. The dataset will be called "data".
data <- read.csv(tf)
View(data)
GET("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv")
g <- GET("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv")
g
read.csv(g)
g$content
g <- GET("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv", authenticate(":", ":", type="ntlm"))
30000/3000000000
################ essais dap seq et connection a la base de donnees
load("D:/These/NetworkShiny/NetworkData/CO2DEGenes_faibleNitrate_CO2-N.RData")
setwd("D:/These/NetworkInference")
source("Funtions/Network_functions.R")
library(ggplot2)
library(visNetwork)
load("D:/These/NetworkShiny/NetworkData/CO2DEGenes_faibleNitrate_CO2-N.RData")
data$nodes
read.csv("Data/HY5TargetsLee2007.csv", h = T, sep = '\t')
hy5 <- read.csv("Data/HY5TargetsLee2007.csv", h = T, sep = '\t')
View(hy5)
hy5Targets <- hy5$GeneID
hy5 <- read.csv("Data/HY5TargetsLee2007.csv", h = T, sep = '\t', stringsAsFactors = F)
hy5Targets <- hy5$GeneID
hy5Targets <- toUpper(hy5$GeneID)
hy5Targets <- ToUpper(hy5$GeneID)
hy5Targets <- toupper(hy5$GeneID)
load("D:/These/NetworkShiny/NetworkData/CO2DEGenes_IronStarv_CO2-Fe.RData")
data$nodes$HY5_Target_Chip <- ifelse(data$nodes$id %in% hy5Targets, 1, 0)
plotNetwork(data)
data$nodes$group <- data$nodes$HY5_Target_Chip
plotNetwork(data)
sum(data$nodes$HY5_Target_Chip)
sum(data$nodes$HY5_Target_Chip)/dim(data$nodes)[1]
3894/27000
3894/28000
load("D:/These/NetworkShiny/NetworkData/CO2DEGenes_IronStarv_LowNitrate_CO2-N-Fe.RData")
data$nodes$HY5_Target_Chip <- ifelse(data$nodes$id %in% hy5Targets, 1, 0)
sum(data$nodes$HY5_Target_Chip)/dim(data$nodes)[1]
load("D:/These/NetworkShiny/NetworkData/CO2DEGenes_faibleNitrate_CO2-N.RData")
data$nodes$HY5_Target_Chip <- ifelse(data$nodes$id %in% hy5Targets, 1, 0)
sum(data$nodes$HY5_Target_Chip)/dim(data$nodes)[1]
load("D:/These/NetworkShiny/NetworkData/CO2DEGenes_IronStarv_CO2-Fe.RData")
hy5edges <- data$edges[data$edges$from == "AT5G11260",]
data$edges$HY5_Chip_Validated <- ifelse(data$edges$to %in% hy5Targets & data$edges$from == "AT5G11260", 1, 0)
sum(data$edges$HY5_Chip_Validated)
18/90
data$edges
data$edges$to %in% hy5Targets & data$edges$from == "AT5G11260"
sum(data$edges$to %in% hy5Targets & data$edges$from == "AT5G11260")
hy5edges[hy5edges$DapSeqAproved,]
hy5Dap <- hy5edges[hy5edges$DapSeqAproved,"to"]
hy5edges <- data$edges[data$edges$from == "AT5G11260",]
hy5Dap <- hy5edges[hy5edges$DapSeqAproved,"to"]
hy5edges
hy5Chip <- hy5edges[hy5edges$HY5_Chip_Validated==1,"to"]
intersect(hy5Chip, hy5Dap)
common <- intersect(hy5Chip, hy5Dap)
commonHy5 <- data$nodes[data$nodes$id %in% common,]
View(commonHy5)
